{
  "openapi": "3.0.1",
  "info": {
    "title": "IF2performis",
    "version": "v1",
    "contact": {
      "name": "Infosystem AG",
      "email": "support@infosystem.ch",
      "url": "https://www.infosystem.ch"
    },
    "description": "IF2performis Rest API"
  },
  "servers": [],
  "paths": {
    "/api/v1/finance/cost-accounting/entries": {
      "get": {
        "summary": "Searches for cost accounting entries",
        "tags": [
          "Finance"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/financeCostAccountingEntry"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input, object invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/problemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Basic Authentication failed"
          },
          "403": {
            "description": "Requestor has insufficient rights"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service unavailable due to maintenance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/maintenanceWindow"
                }
              }
            }
          }
        },
        "operationId": "getFinanceCostAccountingEntries",
        "description": "Returns all matching cost accounting entries.",
        "parameters": [
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Identifying the system calling the service.",
            "required": true,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          },
          {
            "name": "X-Requesting-User",
            "in": "header",
            "description": "Identifying the user calling the service.",
            "required": true,
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "X-Flow-ID",
            "in": "header",
            "description": "Optional technical Id (GUID) for call identification.",
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "schema": {
              "type": "string",
              "maxLength": 30
            },
            "in": "header",
            "name": "X-Client-Type",
            "description": "Optional client type calling the service."
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of entries  to skip  for pagination.",
            "schema": {
              "maximum": 1000000,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of entries to return.",
            "schema": {
              "maximum": 10000,
              "minimum": 0,
			  "default": 10000,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "changesSinceDateTime",
            "in": "query",
            "description": "Get all entries since the specified date time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "changesSinceChangeId",
            "in": "query",
            "description": "Get all entries since the specified change id.",
            "schema": {
              "maximum": 9999999999,
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 999999,
              "minimum": 1
            },
            "in": "query",
            "name": "companyNo",
            "description": "Get the entries of the specified company number."
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 9999999999,
              "format": "int64",
              "example": 658972
            },
            "in": "query",
            "name": "entryNo",
            "description": "Entry number of the cost accounting entry. May be used together with origin and company number."
          },
          {
            "schema": {
              "type": "string",
              "example": "658972"
            },
            "in": "query",
            "name": "externalEntryId",
            "description": "External entry id of the cost accounting entry."
          }
        ]
      },
      "put": {
        "summary": "Updates an existing cost accounting entry if either internal or external Id match.\nCreates a cost accounting entry if neither internal nor external Id is provided or no matching record could be found.",
        "tags": [
          "Finance"
        ],
        "operationId": "putFinanceCostAccountingEntries",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "entries": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/financeCostAccountingEntry"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input, object invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/problemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Basic Authentication failed"
          },
          "403": {
            "description": "Requestor has insufficient rights"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service unavailable due to maintenance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/maintenanceWindow"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "X-Requesting-System",
            "description": "Identifying the system calling the service.",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "X-Requesting-User",
            "description": "Identifying the user calling the service.",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "X-Flow-ID",
            "description": "Optional technical id (GUID) for call identification."
          },
          {
            "schema": {
              "type": "string",
              "maxLength": 30
            },
            "in": "header",
            "name": "X-Client-Type",
            "description": "Optional client type calling the service."
          }
        ],
        "description": "Updates an existing entry if internal or external Id match.\nCreates an entry if neither internal or external Id is provided or no matching record could be found.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/financeCostAccountingEntry"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "financeCostAccountingEntry": {
        "title": "CostAccountingEntry",
        "type": "object",
        "description": "Represents a entry in the cost accounting.",
        "properties": {
          "changeId": {
            "type": "integer",
            "format": "int64",
            "minimum": 1,
            "maximum": 9999999999,
            "description": "Change identification of the entry.",
            "example": 322784,
            "readOnly": true
          },
          "changeDate": {
            "type": "string",
            "format": "date-time",
            "description": "Change date of the entry.",
            "example": "2022-04-25 09:30:00",
            "readOnly": true
          },
          "modifyUser": {
            "type": "string",
            "maxLength": 30,
            "description": "User who last modified the entry.",
            "example": "STJ",
            "readOnly": true
          },
          "modifyDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date the entry was last modified.",
            "example": "2024-01-30T11:46:59",
            "readOnly": true
          },
          "entryId": {
            "type": "integer",
            "format": "int64",
            "minimum": 1,
            "maximum": 9999999999,
            "example": 12345,
            "description": "Unique identifier of the entry. "
          },
          "externalEntryId": {
            "type": "string",
            "maxLength": 200,
            "description": "Id of the entry in the external system.",
            "example": "C47C97C0F4B04096855955CB5AD47444"
          },
          "origin": {
            "type": "string",
            "maxLength": 200,
            "description": "The entry's system of origin.",
            "example": "ISBRW"
          },
          "companyNo": {
            "type": "integer",
            "format": "int64",
            "minimum": 1,
            "maximum": 999999,
            "description": "Company identification of the entry.",
            "example": 37
          },
          "entryNo": {
            "type": "integer",
            "format": "int64",
            "minimum": 1,
            "maximum": 9999999999,
            "example": 12345,
            "description": "Identifier of entry in combination with the CompanyNo. Not unique."
          },
          "costCenterNo": {
            "type": "string",
            "maxLength": 20,
            "description": "Cost center identifier. Either costCenterNo, costUnitNo or orderNo may be used at once.",
            "minLength": 1,
            "example": "135"
          },
          "costUnitNo": {
            "type": "string",
            "maxLength": 20,
            "description": "Cost unit identifier. Either costCenterNo, costUnitNo or orderNo may be used at once.",
            "example": "6548217"
          },
          "orderNo": {
            "type": "string",
            "maxLength": 20,
            "description": "Order no identifier. Either costCenterNo, costUnitNo or orderNo may be used at once.",
            "example": "4712"
          },
          "salesChannel": {
            "type": "string",
            "maxLength": 3,
            "example": "20",
            "description": "Identifies the sales channel. May be used together with costCenterNo, CostUnitNo or orderNo."
          },
          "costType": {
            "type": "string",
            "maxLength": 10,
            "example": "4547",
            "description": "Cost type of the entry."
          },
          "period": {
            "type": "integer",
            "example": 202401,
            "format": "int64",
            "minimum": 1,
            "maximum": 999999,
            "description": "Accounting period of the entry."
          },
          "budgetOrActual": {
            "type": "string",
            "description": "B => Budget / I => Actual / P => Plan / K => Shortterm income statement",
            "maxLength": 1,
            "example": "I"
          },
          "voucherType": {
            "type": "string",
            "maxLength": 4,
            "example": "INV",
            "description": "Voucher type from financial accounting."
          },
          "voucherNo": {
            "type": "integer",
            "format": "int64",
            "minimum": 1,
            "maximum": 9999999999,
            "example": 658421,
            "description": "Voucher number from financial accounting."
          },
          "entryDate": {
            "type": "string",
            "format": "date",
            "example": "2024-02-24",
            "description": "Date of the entry."
          },
          "text": {
            "type": "string",
            "maxLength": 1000,
            "example": "Budget 202403",
            "description": "Entry text."
          },
          "amountBSC": {
            "type": "number",
            "example": "18000.65",
            "format": "decimal",
            "minimum": -999999999999999999.99,
            "maximum": 999999999999999999.99,
            "description": "Amount of the entry in balance sheet currency."
          },
          "quantity": {
            "type": "number",
            "example": "2.1234",
            "format": "decimal",
            "minimum": -999999999999999999.9999,
            "maximum": 999999999999999999.9999,
            "description": "Quantity in the unit defined on the cost type."
          },
          "markedForDeletion": {
            "type": "boolean",
            "description": "Is the entry going to be deleted in the next cost accounting processing?"
          },
          "processed": {
            "type": "boolean",
            "description": "Is the entry processed and will therefore be shown in reports?"
          },
          "generated": {
            "type": "string",
            "example": "U",
            "maxLength": 1,
            "description": "Defines the type of system generated entries. E => Debit bookings for combined cc & cu entries / F => Fix cost entries / K => Short term income statement / V => Cost allocation / Z => Additional entries / B => Credit bookings for allocations / T => Debit bookings for allocations"
          }
        },
        "required": [
          "companyNo",
          "EntryNo",
          "costType",
          "budgetActual",
          "origin",
          "entryDate",
          "text",
          "amountBSC"
        ]
      },
      "problemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": {},
        "title": "ProblemDetails",
        "description": "",
        "x-examples": {
          "example1": {
            "type": "Warning",
            "title": "Sample Title",
            "status": -99,
            "detail": "This is a generic message to provide a sample return of how a message may be returned.",
            "instance": "TEST",
            "property1": null,
            "property2": null
          }
        }
      },
      "maintenanceWindow": {
        "type": "object",
        "additionalProperties": false,
        "title": "MaintenanceWindow",
        "description": "information structure for active maintenance windows.",
        "x-examples": {
          "example-1": {
            "id": 3511,
            "active": true,
            "fromDateTime": "2019-08-24T14:15:22Z",
            "toDateTime": "2019-08-24T14:15:22Z",
            "info": "monthly maintenance for patch installation",
            "clientStartAllowed": false
          }
        },
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 3511,
            "nullable": true,
            "readOnly": true
          },
          "active": {
            "type": "boolean",
            "default": true,
            "description": "usually the API will respond with this structure, when the maintenance window is active and the window has started."
          },
          "fromDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "start of scheduled maintenance window."
          },
          "toDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "end of scheduled maintenance window."
          },
          "info": {
            "type": "string",
            "example": "monthly maintenance for patch installation",
            "nullable": true
          },
          "clientStartAllowed": {
            "type": "boolean",
            "default": false,
            "description": "defines wether or not clients may continue to work while the maintenance window applies."
          }
        }
      }
    }
  }
}