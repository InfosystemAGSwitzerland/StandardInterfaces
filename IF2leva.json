{
  "openapi": "3.0.1",
  "info": {
    "title": "IF2leva+ API",
    "description": "Interface to access leva+ modules",
    "contact": {
      "name": "Infosystem AG",
      "url": "https://www.infosystem.ch",
      "email": "info@infosystem.ch"
    },
    "version": "v1"
  },
  "paths": {
    "/api/v1/asset-resource-information/storage-places": {
      "get": {
        "tags": [
          "AssetResourceInformation"
        ],
        "summary": "Search for asset resource storage places.",
        "description": "By passing in the appropriate options, the service searches for available asset resource storage places in the system.",
        "parameters": [
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Identifying the system calling the service.",
            "required": true,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          },
          {
            "name": "X-Requesting-User",
            "in": "header",
            "description": "Identifying the user calling the service.",
            "required": true,
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "X-Flow-ID",
            "in": "header",
            "description": "Optional technical id (GUID) for call identification.",
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "X-Client-Type",
            "in": "header",
            "description": "Identifying the client type calling the service.",
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip for pagination.",
            "schema": {
              "maximum": 100000,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "changesSinceDateTime",
            "in": "query",
            "description": "Get all the entities which were added/edited since a specific datetime.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "changesSinceChangeId",
            "in": "query",
            "description": "Get all the entities which were added/edited since the provided change id.",
            "schema": {
              "maximum": 9999999999,
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "accessoryId",
            "in": "query",
            "description": "Retrieve specific record by accessory id.",
            "schema": {
              "maximum": 9999999999,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "machineId",
            "in": "query",
            "description": "Retrieve specific record by machine id.",
            "schema": {
              "maximum": 9999999999,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "storagePlaceId",
            "in": "query",
            "description": "Retrieve specific record by storage place id.",
            "schema": {
              "maximum": 9999999999,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "storageLocationId",
            "in": "query",
            "description": "Retrieve specific record by storage location id.",
            "schema": {
              "maximum": 9999999999,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "storageId",
            "in": "query",
            "description": "Retrieve specific record by storage id.",
            "schema": {
              "maximum": 9999999999,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "activeOnly",
            "in": "query",
            "description": "Retrieve specific records by only active.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of records to return.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetResourceStoragePlace"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaintenanceWindow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      },
      "put": {
        "tags": [
          "AssetResourceInformation"
        ],
        "summary": "Update asset resource storage places.",
        "description": "By passing in the appropriate options, the service searches for available asset resource storage places in the system.",
        "parameters": [
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Identifying the system calling the service.",
            "required": true,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          },
          {
            "name": "X-Requesting-User",
            "in": "header",
            "description": "Identifying the user calling the service.",
            "required": true,
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "X-Flow-ID",
            "in": "header",
            "description": "Optional technical id (GUID) for call identification.",
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "X-Client-Type",
            "in": "header",
            "description": "Identifying the client type calling the service.",
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Set of asset resource storage places to assign.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AssetResourceStoragePlace"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AssetResourceStoragePlace"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AssetResourceStoragePlace"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetResourceStoragePlace"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaintenanceWindow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/api/v1/master-data/accessories": {
      "get": {
        "tags": [
          "MasterData"
        ],
        "summary": "Returns a list of accessories filtered by the provided parameters.",
        "description": "By passing in the appropriate options, the service searches for accessories in the system.",
        "parameters": [
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Identifying the system calling the service.",
            "required": true,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          },
          {
            "name": "X-Requesting-User",
            "in": "header",
            "description": "Identifying the user calling the service.",
            "required": true,
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "X-Flow-ID",
            "in": "header",
            "description": "Optional technical id (GUID) for call identification.",
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "X-Client-Type",
            "in": "header",
            "description": "Identifying the client type calling the service.",
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "searchString",
            "in": "query",
            "description": "The search string (searches in case-insensitive in description).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip for pagination.",
            "schema": {
              "maximum": 100000,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "changesSinceDateTime",
            "in": "query",
            "description": "Get all the entries which were added/edited since a specific date/time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "changesSinceChangeId",
            "in": "query",
            "description": "Get all the entries which were added/edited since the provided change id.",
            "schema": {
              "maximum": 9999999999,
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "accessoryId",
            "in": "query",
            "description": "Retrieve a specific record by internal accessory id.",
            "schema": {
              "maximum": 9999999999,
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "externalAccessoryId",
            "in": "query",
            "description": "Retrieve a specific record by external accessory id.",
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of records to return.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Accessory"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaintenanceWindow"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/master-data/machines": {
      "get": {
        "tags": [
          "MasterData"
        ],
        "summary": "Returns a list of machines filtered by the provided parameters.",
        "description": "By passing in the appropriate options, the service searches for machines in the system.",
        "parameters": [
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Identifying the system calling the service.",
            "required": true,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          },
          {
            "name": "X-Requesting-User",
            "in": "header",
            "description": "Identifying the user calling the service.",
            "required": true,
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "X-Flow-ID",
            "in": "header",
            "description": "Optional technical id (GUID) for call identification.",
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "X-Client-Type",
            "in": "header",
            "description": "Identifying the client type calling the service.",
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "searchString",
            "in": "query",
            "description": "The search string (searches in case-insensitive in description).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip for pagination.",
            "schema": {
              "maximum": 100000,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "changesSinceDateTime",
            "in": "query",
            "description": "Get all the entries which were added/edited since a specific date/time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "changesSinceChangeId",
            "in": "query",
            "description": "Get all the entries which were added/edited since the provided change id.",
            "schema": {
              "maximum": 9999999999,
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "machineId",
            "in": "query",
            "description": "Retrieve a specific record by internal machine id.",
            "schema": {
              "maximum": 9999999999,
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "externalMachineId",
            "in": "query",
            "description": "Retrieve a specific record by external machine id.",
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of records to return.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Machine"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaintenanceWindow"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/master-data/equipment-types": {
      "get": {
        "tags": [
          "MasterData"
        ],
        "summary": "Search for equipment types.",
        "description": "By passing in the appropriate options, the service searches for available equipment types in the system.",
        "parameters": [
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Identifying the system calling the service.",
            "required": true,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          },
          {
            "name": "X-Requesting-User",
            "in": "header",
            "description": "Identifying the user calling the service.",
            "required": true,
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "X-Flow-ID",
            "in": "header",
            "description": "Optional technical id (GUID) for call identification.",
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "X-Client-Type",
            "in": "header",
            "description": "Identifying the client type calling the service.",
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "searchString",
            "in": "query",
            "description": "Optional search string for looking up a record within name and searchterm fields.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip for pagination.",
            "schema": {
              "maximum": 100000,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "changesSinceDateTime",
            "in": "query",
            "description": "Get all the entries which were added/edited since a specific date/time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "changesSinceChangeId",
            "in": "query",
            "description": "Get all the entries which were added/edited since the provided change id.",
            "schema": {
              "maximum": 9999999999,
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "equipmentTypeId",
            "in": "query",
            "description": "Retrieve a specific record by internal equipment type id.",
            "schema": {
              "maximum": 9999999999,
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "externalEquipmentTypeId",
            "in": "query",
            "description": "Retrieve a specific record by external equipment type id.",
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of records to return.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EquipmentType"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaintenanceWindow"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/master-data/customers": {
      "get": {
        "tags": [
          "MasterData"
        ],
        "summary": "Retrieves a filtered list of customers.",
        "description": "By passing in the appropriate options, the service searches for customers in the system.",
        "parameters": [
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Identifying the system calling the service.",
            "required": true,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          },
          {
            "name": "X-Requesting-User",
            "in": "header",
            "description": "Identifying the user calling the service.",
            "required": true,
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "X-Flow-ID",
            "in": "header",
            "description": "Optional technical id (GUID) for call identification.",
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "X-Client-Type",
            "in": "header",
            "description": "Identifying the client type calling the service.",
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "searchString",
            "in": "query",
            "description": "Optional search string for looking up a record within the customer number.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip for pagination.",
            "schema": {
              "maximum": 100000,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "changesSinceDateTime",
            "in": "query",
            "description": "Get all the entities which were added/edited since a specific datetime.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "changesSinceChangeId",
            "in": "query",
            "description": "Get all the entities which were added/edited since the provided change id.",
            "schema": {
              "maximum": 9999999999,
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "customerId",
            "in": "query",
            "description": "Retrieve a specific record by internal customer id.",
            "schema": {
              "maximum": 9999999999,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "externalCustomerId",
            "in": "query",
            "description": "Retrieve a specific record by external customer id.",
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          },
          {
            "name": "customerNo",
            "in": "query",
            "description": "Retrieve a specific record by customer number.",
            "schema": {
              "maxLength": 50,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of records to return.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Customer"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaintenanceWindow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/api/v1/master-data/project-structures": {
      "get": {
        "tags": [
          "MasterData"
        ],
        "summary": "Search for project-structures.",
        "description": "By passing in the appropriate options, the service searches for project-structures in the system.",
        "parameters": [
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Identifying the system calling the service.",
            "required": true,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          },
          {
            "name": "X-Requesting-User",
            "in": "header",
            "description": "Identifying the user calling the service.",
            "required": true,
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "X-Flow-ID",
            "in": "header",
            "description": "Optional technical id (GUID) for call identification.",
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "X-Client-Type",
            "in": "header",
            "description": "Identifying the client type calling the service.",
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "searchString",
            "in": "query",
            "description": "Optional search string for looking up a record within the description.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip for pagination.",
            "schema": {
              "maximum": 100000,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "changesSinceDateTime",
            "in": "query",
            "description": "Get all the entries which were added/edited since a specific datetime.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "changesSinceChangeId",
            "in": "query",
            "description": "Get all the entries which were added/edited since the provided change id.",
            "schema": {
              "maximum": 9999999999,
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of records to return.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectStructure"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaintenanceWindow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/api/v1/master-data/surcharges": {
      "get": {
        "tags": [
          "MasterData"
        ],
        "summary": "Search for surcharges.",
        "description": "By passing in the appropriate options, the service searches for available surcharges in the system.",
        "parameters": [
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Identifying the system calling the service.",
            "required": true,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          },
          {
            "name": "X-Requesting-User",
            "in": "header",
            "description": "Identifying the user calling the service.",
            "required": true,
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "X-Flow-ID",
            "in": "header",
            "description": "Optional technical id (GUID) for call identification.",
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "X-Client-Type",
            "in": "header",
            "description": "Identifying the client type calling the service.",
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip for pagination.",
            "schema": {
              "maximum": 100000,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "changesSinceDateTime",
            "in": "query",
            "description": "Get all the entities which were added/edited since a specific datetime.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "changesSinceChangeId",
            "in": "query",
            "description": "Get all the entities which were added/edited since the provided change id.",
            "schema": {
              "maximum": 9999999999,
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "surchargeId",
            "in": "query",
            "description": "Retrieve specific record by internal id.",
            "schema": {
              "maximum": 9999999999,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "searchString",
            "in": "query",
            "description": "Optional search string for looking up a record within name and searchterm fields.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of records to return.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Surcharge"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaintenanceWindow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/api/v1/master-data/workers": {
      "get": {
        "tags": [
          "MasterData"
        ],
        "summary": "Search for workers.",
        "description": "By passing in the appropriate options, the service searches for available workers in the system.",
        "parameters": [
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Identifying the system calling the service.",
            "required": true,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          },
          {
            "name": "X-Requesting-User",
            "in": "header",
            "description": "Identifying the user calling the service.",
            "required": true,
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "X-Flow-ID",
            "in": "header",
            "description": "Optional technical id (GUID) for call identification.",
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "X-Client-Type",
            "in": "header",
            "description": "Identifying the client type calling the service.",
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip for pagination.",
            "schema": {
              "maximum": 100000,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workerId",
            "in": "query",
            "description": "Retrieve specific record by worker id.",
            "schema": {
              "maximum": 9999999999,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "Retrieve specific record by employee id.",
            "schema": {
              "maximum": 9999999999,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of records to return.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Worker"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaintenanceWindow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/api/v1/master-data/storage-places": {
      "get": {
        "tags": [
          "MasterData"
        ],
        "summary": "Search for storage places.",
        "description": "By passing in the appropriate options, the service searches for available storage places in the system.",
        "parameters": [
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Identifying the system calling the service.",
            "required": true,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          },
          {
            "name": "X-Requesting-User",
            "in": "header",
            "description": "Identifying the user calling the service.",
            "required": true,
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "X-Flow-ID",
            "in": "header",
            "description": "Optional technical id (GUID) for call identification.",
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "X-Client-Type",
            "in": "header",
            "description": "Identifying the client type calling the service.",
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip for pagination.",
            "schema": {
              "maximum": 100000,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "changesSinceDateTime",
            "in": "query",
            "description": "Get all the entities which were added/edited since a specific datetime.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "changesSinceChangeId",
            "in": "query",
            "description": "Get all the entities which were added/edited since the provided change id.",
            "schema": {
              "maximum": 9999999999,
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "storagePlaceId",
            "in": "query",
            "description": "Retrieve specific record by storage place id.",
            "schema": {
              "maximum": 9999999999,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "storageLocationId",
            "in": "query",
            "description": "Retrieve specific record by storage location id.",
            "schema": {
              "maximum": 9999999999,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "storageId",
            "in": "query",
            "description": "Retrieve specific record by storage id.",
            "schema": {
              "maximum": 9999999999,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of records to return.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StoragePlace"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaintenanceWindow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/api/v1/rental/jobs": {
      "get": {
        "tags": [
          "RentalJob"
        ],
        "summary": "Returns a list of rental jobs filtered by the provided parameters.",
        "parameters": [
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Identifing the system calling the service.",
            "required": true,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          },
          {
            "name": "X-Requesting-User",
            "in": "header",
            "description": "Identifing the user calling the service.",
            "required": true,
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "X-Flow-ID",
            "in": "header",
            "description": "Optional technical id (GUID) for call identification.",
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "X-Client-Type",
            "in": "header",
            "description": "Identifying the client type calling the service.",
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip for pagination.",
            "schema": {
              "maximum": 100000,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "changesSinceDateTime",
            "in": "query",
            "description": "Get all the entries which were added/edited since a specific date/time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "changesSinceChangeId",
            "in": "query",
            "description": "Get all the entries which were added/edited since the provided change id.",
            "schema": {
              "maximum": 9999999999,
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "jobId",
            "in": "query",
            "description": "Retrieve specific record by id.",
            "schema": {
              "maximum": 9999999999,
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "includeDetails",
            "in": "query",
            "description": "If `true` then details are also returned (Default = false).",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of records to return.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Job"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaintenanceWindow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/api/v1/rental/jobs/timestamps": {
      "get": {
        "tags": [
          "RentalJob"
        ],
        "summary": "Search for job timestamps.",
        "parameters": [
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Identifing the system calling the service.",
            "required": true,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          },
          {
            "name": "X-Requesting-User",
            "in": "header",
            "description": "Identifing the user calling the service.",
            "required": true,
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "X-Flow-ID",
            "in": "header",
            "description": "Optional technical id (GUID) for call identification.",
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "X-Client-Type",
            "in": "header",
            "description": "Identifying the client type calling the service.",
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "jobId",
            "in": "query",
            "description": "Required to retrieve records of specific job.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JobTimeStamp"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaintenanceWindow"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "RentalJob"
        ],
        "summary": "Modify job time stamps.",
        "parameters": [
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Identifing the system calling the service.",
            "required": true,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          },
          {
            "name": "X-Requesting-User",
            "in": "header",
            "description": "Identifing the user calling the service.",
            "required": true,
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "X-Flow-ID",
            "in": "header",
            "description": "Optional technical id (GUID) for call identification.",
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "X-Client-Type",
            "in": "header",
            "description": "Identifying the client type calling the service.",
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Set of job time stamps to assign.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JobTimeStamp"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JobTimeStamp"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JobTimeStamp"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JobTimeStamp"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaintenanceWindow"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/rental/jobs/reports": {
      "get": {
        "tags": [
          "RentalJob"
        ],
        "summary": "Search for job reports.",
        "parameters": [
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Identifing the system calling the service.",
            "required": true,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          },
          {
            "name": "X-Requesting-User",
            "in": "header",
            "description": "Identifing the user calling the service.",
            "required": true,
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "X-Flow-ID",
            "in": "header",
            "description": "Optional technical id (GUID) for call identification.",
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "X-Client-Type",
            "in": "header",
            "description": "Identifying the client type calling the service.",
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "jobId",
            "in": "query",
            "description": "Retrieve specific record by job id.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JobReport"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaintenanceWindow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      },
      "post": {
        "tags": [
          "RentalJob"
        ],
        "summary": "Create job reports.",
        "parameters": [
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Identifing the system calling the service.",
            "required": true,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          },
          {
            "name": "X-Requesting-User",
            "in": "header",
            "description": "Identifing the user calling the service.",
            "required": true,
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "X-Flow-ID",
            "in": "header",
            "description": "Optional technical id (GUID) for call identification.",
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "X-Client-Type",
            "in": "header",
            "description": "Identifying the client type calling the service.",
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Submit a complete report. Reports can not be altered by the interface after creation. Once a report is created it needs to be processed or deleted within leva+.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobReport"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/JobReport"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/JobReport"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobReport"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaintenanceWindow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/api/v1/rental/jobs/booking-activities": {
      "get": {
        "tags": [
          "RentalJob"
        ],
        "summary": "Retrieve booking activities for a job.",
        "description": "By passing in the appropriate options, the service searches for job booking activities in the system.",
        "parameters": [
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Identifing the system calling the service.",
            "required": true,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          },
          {
            "name": "X-Requesting-User",
            "in": "header",
            "description": "Identifing the user calling the service.",
            "required": true,
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "X-Flow-ID",
            "in": "header",
            "description": "Optional technical id (GUID) for call identification.",
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "X-Client-Type",
            "in": "header",
            "description": "Identifying the client type calling the service.",
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip for pagination.",
            "schema": {
              "maximum": 100000,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "jobId",
            "in": "query",
            "description": "Required to retrieve records of a specific job.",
            "required": true,
            "schema": {
              "maximum": 9999999999,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of records to return.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JobBookingActivity"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaintenanceWindow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/api/v1/rental/jobs/rental-handovers": {
      "get": {
        "tags": [
          "RentalJob"
        ],
        "summary": "Search for job rental handovers.",
        "description": "By passing in the appropriate options, the service searches for job handover in the system.",
        "parameters": [
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Identifing the system calling the service.",
            "required": true,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          },
          {
            "name": "X-Requesting-User",
            "in": "header",
            "description": "Identifing the user calling the service.",
            "required": true,
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "X-Flow-ID",
            "in": "header",
            "description": "Optional technical id (GUID) for call identification.",
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "X-Client-Type",
            "in": "header",
            "description": "Identifying the client type calling the service.",
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip for pagination.",
            "schema": {
              "maximum": 100000,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "jobId",
            "in": "query",
            "description": "Required to retrieve records of specific job.",
            "required": true,
            "schema": {
              "maximum": 9999999999,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of records to return.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JobHandover"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaintenanceWindow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      },
      "put": {
        "tags": [
          "RentalJob"
        ],
        "summary": "Modify job handovers.",
        "description": "Sets the job handover for a given Job id.",
        "parameters": [
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Identifing the system calling the service.",
            "required": true,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          },
          {
            "name": "X-Requesting-User",
            "in": "header",
            "description": "Identifing the user calling the service.",
            "required": true,
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "X-Flow-ID",
            "in": "header",
            "description": "Optional technical id (GUID) for call identification.",
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "X-Client-Type",
            "in": "header",
            "description": "Identifying the client type calling the service.",
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Handover to set on job id.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobHandover"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/JobHandover"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/JobHandover"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobHandover"
                }
              }
            }
          },
          "201": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobHandover"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaintenanceWindow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/api/v1/rental/jobs/rental-returns": {
      "get": {
        "tags": [
          "RentalJob"
        ],
        "summary": "Search for job rental returns.",
        "description": "By passing in the appropriate options, the service searches for job returns in the system.",
        "parameters": [
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Identifing the system calling the service.",
            "required": true,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          },
          {
            "name": "X-Requesting-User",
            "in": "header",
            "description": "Identifing the user calling the service.",
            "required": true,
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "X-Flow-ID",
            "in": "header",
            "description": "Optional technical id (GUID) for call identification.",
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "X-Client-Type",
            "in": "header",
            "description": "Identifying the client type calling the service.",
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip for pagination.",
            "schema": {
              "maximum": 100000,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "jobId",
            "in": "query",
            "description": "Required to retrieve records of specific job.",
            "required": true,
            "schema": {
              "maximum": 9999999999,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of records to return.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JobReturn"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaintenanceWindow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      },
      "put": {
        "tags": [
          "RentalJob"
        ],
        "summary": "Modify job returns.",
        "description": "Sets the rental return for a given job id.",
        "parameters": [
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Identifing the system calling the service.",
            "required": true,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          },
          {
            "name": "X-Requesting-User",
            "in": "header",
            "description": "Identifing the user calling the service.",
            "required": true,
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "X-Flow-ID",
            "in": "header",
            "description": "Optional technical id (GUID) for call identification.",
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "X-Client-Type",
            "in": "header",
            "description": "Identifying the client type calling the service.",
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "return to set on job id.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobReturn"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/JobReturn"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/JobReturn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobReturn"
                }
              }
            }
          },
          "201": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobReturn"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaintenanceWindow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/api/v1/rental/jobs/rental-completions": {
      "get": {
        "tags": [
          "RentalJob"
        ],
        "summary": "Search for job rental completions.",
        "description": "By passing in the appropriate options, the service searches for job completions in the system.",
        "parameters": [
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Identifing the system calling the service.",
            "required": true,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          },
          {
            "name": "X-Requesting-User",
            "in": "header",
            "description": "Identifing the user calling the service.",
            "required": true,
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "X-Flow-ID",
            "in": "header",
            "description": "Optional technical id (GUID) for call identification.",
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "X-Client-Type",
            "in": "header",
            "description": "Identifying the client type calling the service.",
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip for pagination.",
            "schema": {
              "maximum": 100000,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "jobId",
            "in": "query",
            "description": "Required to retrieve records of specific job.",
            "required": true,
            "schema": {
              "maximum": 9999999999,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of records to return.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JobCompletion"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaintenanceWindow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      },
      "put": {
        "tags": [
          "RentalJob"
        ],
        "summary": "Modify job completion.",
        "description": "Sets the rental return for a given job id.",
        "parameters": [
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Identifing the system calling the service.",
            "required": true,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          },
          {
            "name": "X-Requesting-User",
            "in": "header",
            "description": "Identifing the user calling the service.",
            "required": true,
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "X-Flow-ID",
            "in": "header",
            "description": "Optional technical id (GUID) for call identification.",
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "X-Client-Type",
            "in": "header",
            "description": "Identifying the client type calling the service.",
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "return to set on job Id.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobCompletion"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/JobCompletion"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/JobCompletion"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobCompletion"
                }
              }
            }
          },
          "201": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobCompletion"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaintenanceWindow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/api/v1/rental/jobs/transport-positions": {
      "get": {
        "tags": [
          "RentalJob"
        ],
        "summary": "Search for job transport positions.",
        "description": "By passing in the appropriate options, the service searches for job transport positions in the system.",
        "parameters": [
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Identifing the system calling the service.",
            "required": true,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          },
          {
            "name": "X-Requesting-User",
            "in": "header",
            "description": "Identifing the user calling the service.",
            "required": true,
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "X-Flow-ID",
            "in": "header",
            "description": "Optional technical id (GUID) for call identification.",
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "X-Client-Type",
            "in": "header",
            "description": "Identifying the client type calling the service.",
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip for pagination.",
            "schema": {
              "maximum": 100000,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "jobId",
            "in": "query",
            "description": "Required to retrieve records of specific job.",
            "required": true,
            "schema": {
              "maximum": 9999999999,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of records to return.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JobTransportPosition"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaintenanceWindow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/api/v1/rental/jobs/transport-positions-checklist": {
      "put": {
        "tags": [
          "RentalJob"
        ],
        "summary": "Modify job transport positions checklist.",
        "description": "Updates the loaded or unloaded status on an existing set of job transport.",
        "parameters": [
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Identifing the system calling the service.",
            "required": true,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          },
          {
            "name": "X-Requesting-User",
            "in": "header",
            "description": "Identifing the user calling the service.",
            "required": true,
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "X-Flow-ID",
            "in": "header",
            "description": "Optional technical id (GUID) for call identification.",
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "X-Client-Type",
            "in": "header",
            "description": "Identifying the client type calling the service.",
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "transport demand checklist to be set on given job id.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobTransportPositionChecklist"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/JobTransportPositionChecklist"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/JobTransportPositionChecklist"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobTransportPositionChecklist"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaintenanceWindow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/api/v1/rental/jobs/documents": {
      "get": {
        "tags": [
          "RentalJob"
        ],
        "summary": "Search for job documents.",
        "description": "By passing in the appropriate options, the service searches for job documents in the system.",
        "parameters": [
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Identifing the system calling the service.",
            "required": true,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          },
          {
            "name": "X-Requesting-User",
            "in": "header",
            "description": "Identifing the user calling the service.",
            "required": true,
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "X-Flow-ID",
            "in": "header",
            "description": "Optional technical id (GUID) for call identification.",
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "X-Client-Type",
            "in": "header",
            "description": "Identifying the client type calling the service.",
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip for pagination.",
            "schema": {
              "maximum": 100000,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "jobId",
            "in": "query",
            "description": "Required to retrieve records of specific job.",
            "required": true,
            "schema": {
              "maximum": 9999999999,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of records to return.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JobDocument"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaintenanceWindow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      },
      "put": {
        "tags": [
          "RentalJob"
        ],
        "summary": "Modify job documents.",
        "description": "Sets the job documents that are assigned to their respected job ids.",
        "parameters": [
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Identifing the system calling the service.",
            "required": true,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          },
          {
            "name": "X-Requesting-User",
            "in": "header",
            "description": "Identifing the user calling the service.",
            "required": true,
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "X-Flow-ID",
            "in": "header",
            "description": "Optional technical id (GUID) for call identification.",
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "X-Client-Type",
            "in": "header",
            "description": "Identifying the client type calling the service.",
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Job documents to be assigned to the job id.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JobDocument"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JobDocument"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JobDocument"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JobDocument"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaintenanceWindow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/api/v1/rental/jobs/surcharges": {
      "get": {
        "tags": [
          "RentalJob"
        ],
        "summary": "Search for job surcharges.",
        "description": "By passing in the appropriate options, the service searches for job surcharges in the system.",
        "parameters": [
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Identifing the system calling the service.",
            "required": true,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          },
          {
            "name": "X-Requesting-User",
            "in": "header",
            "description": "Identifing the user calling the service.",
            "required": true,
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "X-Flow-ID",
            "in": "header",
            "description": "Optional technical ID (GUID) for call identification.",
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "X-Client-Type",
            "in": "header",
            "description": "Identifying the client type calling the service.",
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip for pagination.",
            "schema": {
              "maximum": 100000,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "jobId",
            "in": "query",
            "description": "Required to retrieve records of specific job.",
            "required": true,
            "schema": {
              "maximum": 9999999999,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of records to return.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JobSurcharge"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaintenanceWindow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      },
      "put": {
        "tags": [
          "RentalJob"
        ],
        "summary": "Modify job surchages.",
        "description": "Sets the job surcharges for a given job id.",
        "parameters": [
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Identifying the system calling the service.",
            "required": true,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          },
          {
            "name": "X-Requesting-User",
            "in": "header",
            "description": "Identifying the user calling the service.",
            "required": true,
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "X-Flow-ID",
            "in": "header",
            "description": "Optional technical ID (GUID) for call identification.",
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "X-Client-Type",
            "in": "header",
            "description": "Identifying the client type calling the service.",
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Job surcharges to be set on job id.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JobSurcharge"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JobSurcharge"
                  }
                }
              }
            }
          },
          "201": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JobSurcharge"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaintenanceWindow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/api/v1/rental/jobs/problems": {
      "get": {
        "tags": [
          "RentalJob"
        ],
        "summary": "Search for job problems.",
        "description": "By passing in the appropriate options, the service searches for job problems in the system.",
        "parameters": [
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Identifing the system calling the service.",
            "required": true,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          },
          {
            "name": "X-Requesting-User",
            "in": "header",
            "description": "Identifing the user calling the service.",
            "required": true,
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "X-Flow-ID",
            "in": "header",
            "description": "Optional technical id (GUID) for call identification.",
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "X-Client-Type",
            "in": "header",
            "description": "Identifying the client type calling the service.",
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip for pagination.",
            "schema": {
              "maximum": 100000,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "jobId",
            "in": "query",
            "description": "Required to retrieve records of specific job.",
            "required": true,
            "schema": {
              "maximum": 9999999999,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of records to return.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JobProblem"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaintenanceWindow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      },
      "put": {
        "tags": [
          "RentalJob"
        ],
        "summary": "Modify job problems.",
        "description": "Set the job problems for a given job id.",
        "parameters": [
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Identifing the system calling the service.",
            "required": true,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          },
          {
            "name": "X-Requesting-User",
            "in": "header",
            "description": "Identifing the user calling the service.",
            "required": true,
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "X-Flow-ID",
            "in": "header",
            "description": "Optional technical id (GUID) for call identification.",
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "X-Client-Type",
            "in": "header",
            "description": "Identifying the client type calling the service.",
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Job problems to be set on job id.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JobProblem"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JobProblem"
                  }
                }
              }
            }
          },
          "201": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JobProblem"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaintenanceWindow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/api/v1/rental/jobs/rental-schedulings": {
      "put": {
        "tags": [
          "RentalJob"
        ],
        "summary": "Updates the scheduled resource on rental job schedulings.",
        "description": "Set the scheduled resource rental jobs for a given job ids.",
        "parameters": [
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Identifing the system calling the service.",
            "required": true,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          },
          {
            "name": "X-Requesting-User",
            "in": "header",
            "description": "Identifing the user calling the service.",
            "required": true,
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "X-Flow-ID",
            "in": "header",
            "description": "Optional technical id (GUID) for call identification.",
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "X-Client-Type",
            "in": "header",
            "description": "Identifying the client type calling the service.",
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Rental job schedulings to be be updated.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JobRentalScheduling"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JobRentalScheduling"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaintenanceWindow"
                }
              }
            }
          },
          "201": {
            "description": "Created."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/api/v1/rental/jobs/asset-resource-storage-places": {
      "put": {
        "tags": [
          "RentalJob"
        ],
        "summary": "Persists rental job asset resource storage places.",
        "description": "Used for changing the storage location in a specific job context.",
        "parameters": [
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Identifing the system calling the service.",
            "required": true,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          },
          {
            "name": "X-Requesting-User",
            "in": "header",
            "description": "Identifing the user calling the service.",
            "required": true,
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "X-Flow-ID",
            "in": "header",
            "description": "Optional technical id (GUID) for call identification.",
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "X-Client-Type",
            "in": "header",
            "description": "Identifying the client type calling the service.",
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Rental job asset resource storage places to be be updated.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JobAssetResourceStoragePlace"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JobAssetResourceStoragePlace"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaintenanceWindow"
                }
              }
            }
          },
          "201": {
            "description": "Created."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/api/v1/rental/orders": {
      "get": {
        "tags": [
          "RentalOrder"
        ],
        "summary": "Returns a list of rental orders filtered by the provided parameters.",
        "parameters": [
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Identifing the system calling the service.",
            "required": true,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          },
          {
            "name": "X-Requesting-User",
            "in": "header",
            "description": "Identifing the user calling the service.",
            "required": true,
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "X-Flow-ID",
            "in": "header",
            "description": "Optional technical id (GUID) for call identification.",
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "X-Client-Type",
            "in": "header",
            "description": "Identifying the client type calling the service.",
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip for pagination.",
            "schema": {
              "maximum": 100000,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "changesSinceDateTime",
            "in": "query",
            "description": "Get all the entries which were added/edited since a specific date/time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "changesSinceChangeId",
            "in": "query",
            "description": "Get all the entries which were added/edited since the provided change id.",
            "schema": {
              "maximum": 9999999999,
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "orderId",
            "in": "query",
            "description": "Retrieve specific record by id.",
            "schema": {
              "maximum": 9999999999,
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "minStatusCode",
            "in": "query",
            "description": "Retrieve specific record where the status code is equal or greater then the provided minimum status code.",
            "schema": {
              "maximum": 9999999999,
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "maxStatusCode",
            "in": "query",
            "description": "Retrieve specific record where the status code is equal or smaller then the provided maximum status code.",
            "schema": {
              "maximum": 9999999999,
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of records to return.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RentalOrder"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaintenanceWindow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/api/v1/rental/orders/internal-documents": {
      "get": {
        "tags": [
          "RentalOrder"
        ],
        "summary": "Search for internal documents in rental orders.",
        "description": "By passing in the appropriate options, the service searches for rental order internal documents in the system.",
        "parameters": [
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Identifing the system calling the service.",
            "required": true,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          },
          {
            "name": "X-Requesting-User",
            "in": "header",
            "description": "Identifing the user calling the service.",
            "required": true,
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "X-Flow-ID",
            "in": "header",
            "description": "Optional technical id (GUID) for call identification.",
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "X-Client-Type",
            "in": "header",
            "description": "Identifying the client type calling the service.",
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip for pagination.",
            "schema": {
              "maximum": 100000,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderId",
            "in": "query",
            "description": "Required to retrieve records of a specific order.",
            "required": true,
            "schema": {
              "maximum": 9999999999,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of records to return.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RentalOrderDocument"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaintenanceWindow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      },
      "put": {
        "tags": [
          "RentalOrder"
        ],
        "summary": "Modify rental order internal documents.",
        "description": "Sets the rental order documents that will be assigned to the respective orders.",
        "parameters": [
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Identifing the system calling the service.",
            "required": true,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          },
          {
            "name": "X-Requesting-User",
            "in": "header",
            "description": "Identifing the user calling the service.",
            "required": true,
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "X-Flow-ID",
            "in": "header",
            "description": "Optional technical id (GUID) for call identification.",
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "X-Client-Type",
            "in": "header",
            "description": "Identifying the client type calling the service.",
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Rental order internal documents to be assigned to the order id.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RentalOrderDocument"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RentalOrderDocument"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RentalOrderDocument"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RentalOrderDocument"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaintenanceWindow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Accessory": {
        "required": [
          "accessoryDisplayType",
          "description",
          "isExternalResource",
          "origin",
          "schedulingGroupCode"
        ],
        "type": "object",
        "properties": {
          "changeId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets the id when the entity was last changed.",
            "format": "int64",
            "nullable": true
          },
          "changeDate": {
            "type": "string",
            "description": "Gets the date and time when the entity was last changed.",
            "format": "date-time",
            "nullable": true
          },
          "accessoryId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the technical identification number of the accessory.",
            "format": "int64",
            "nullable": true
          },
          "externalAccessoryId": {
            "maxLength": 50,
            "type": "string",
            "description": "Gets or sets the external technical identification number of the accessory - may be used instead of Infosystem.Leva.WebApi.IF2Leva.Controllers.Dtos.Accessory.Accessory.AccessoryId.",
            "nullable": true
          },
          "origin": {
            "maxLength": 10,
            "type": "string",
            "description": "Gets or sets the origin of the entity.",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether is this accessory active or not."
          },
          "description": {
            "maxLength": 200,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the accessory's name."
          },
          "accessoryDisplayType": {
            "$ref": "#/components/schemas/AccessoryDisplayType"
          },
          "numberOfItems": {
            "type": "integer",
            "description": "Gets or sets the exact number of available accessories. Required when Infosystem.Leva.WebApi.IF2Leva.Controllers.Dtos.Accessory.Accessory.AccessoryDisplayType is set to \"QUANTITY\".",
            "format": "int64",
            "nullable": true
          },
          "identification": {
            "maxLength": 200,
            "type": "string",
            "description": "Gets or sets the identification or serial number of the accessory. Required when Infosystem.Leva.WebApi.IF2Leva.Controllers.Dtos.Accessory.Accessory.AccessoryDisplayType is set to \"IDENTIFICATION\".",
            "nullable": true
          },
          "branchCode": {
            "maximum": 45629999,
            "minimum": 45620000,
            "type": "integer",
            "description": "Gets or sets the c4562 identification code of the branch to which the machine belongs to.",
            "format": "int64",
            "nullable": true
          },
          "isExternalResource": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether a value indicating whether the resource is external."
          },
          "schedulingGroupCode": {
            "maximum": 45429999,
            "minimum": 45420000,
            "type": "integer",
            "description": "Gets or sets the c4542 code of the accessory's scheduling group that combines accessories of the same type and use (not necessarily the same model or manufacturer but can fullfil the same job requirements).",
            "format": "int64"
          },
          "costCenterNo": {
            "maxLength": 20,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the cost center number for the accessory.",
            "nullable": true
          },
          "ownerCompanyNo": {
            "maximum": 999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the number of the company that owns the accessory.",
            "format": "int64",
            "nullable": true
          },
          "additionalInformationAttributeValueSet": {
            "$ref": "#/components/schemas/AccessoryAttributeValueSet"
          },
          "additionalSchedulingGroupCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SchedulingGroup"
            },
            "description": "Gets or sets a list of additional scheduling groups. A scheduling group combines accessories of the same type and use (not necessarily the same model or manufacturer).",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Accessory master data."
      },
      "AccessoryAttributeValue": {
        "required": [
          "attributeDefinitionId",
          "modifyUser"
        ],
        "type": "object",
        "properties": {
          "attributeValueId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the internal identification of attribute value.",
            "format": "int64",
            "nullable": true
          },
          "attributeDefinitionId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the internal identification of attribute definition.",
            "format": "int64"
          },
          "modifyUser": {
            "maxLength": 30,
            "type": "string",
            "description": "Gets or sets the user who last modified the entry.",
            "nullable": true
          },
          "modifyDate": {
            "type": "string",
            "description": "Gets or sets the date the entry was last modified.",
            "format": "date-time",
            "nullable": true
          },
          "sortNo": {
            "maximum": 9999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the position within the attribute value set.",
            "format": "int64",
            "nullable": true
          },
          "companyNo": {
            "maximum": 999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the company identification of the entry.",
            "format": "int64",
            "nullable": true
          },
          "textValue": {
            "maxLength": 1000,
            "type": "string",
            "description": "Gets or sets the text string value.",
            "nullable": true
          },
          "numberValue": {
            "type": "number",
            "description": "Gets or sets the number or decimal value.",
            "format": "decimal",
            "nullable": true
          },
          "dateValue": {
            "type": "string",
            "description": "Gets or sets the date value.",
            "format": "date-time",
            "nullable": true
          },
          "boolValue": {
            "type": "boolean",
            "description": "Gets or sets the true or false value.",
            "nullable": true
          },
          "codeValue": {
            "type": "integer",
            "description": "Gets or sets the code value.",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The attribute value."
      },
      "AccessoryAttributeValueSet": {
        "required": [
          "attributeSetId",
          "modifyUser"
        ],
        "type": "object",
        "properties": {
          "attributeSetId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the internal identification of attribute set.",
            "format": "int64"
          },
          "attributeValueSetId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the internal identification of attribute value set.",
            "format": "int64",
            "nullable": true
          },
          "modifyUser": {
            "maxLength": 30,
            "type": "string",
            "description": "Gets or sets the user who last modified the entry.",
            "nullable": true
          },
          "modifyDate": {
            "type": "string",
            "description": "Gets or sets the date the entry was last modified.",
            "format": "date-time",
            "nullable": true
          },
          "attributeValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessoryAttributeValue"
            },
            "description": "Gets the list of attribute values.",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "The attribute value set."
      },
      "AccessoryDisplayType": {
        "enum": [
          "NONE",
          "IDENTIFICATION",
          "QUANTITY"
        ],
        "type": "string",
        "description": "Possible type values: - 'NONE': Accessory without identification nor quantity - 'IDENTIFICATION': Accessory with identification - 'QUANTITY': Accessory with quantity."
      },
      "Address": {
        "required": [
          "city",
          "country",
          "zipCode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Gets or sets the business partner address id of the address.",
            "nullable": true
          },
          "street": {
            "maxLength": 43,
            "type": "string",
            "description": "Gets or sets street name without house number.",
            "nullable": true
          },
          "houseNo": {
            "maxLength": 12,
            "type": "string",
            "description": "Gets or sets house number.",
            "nullable": true
          },
          "poBox": {
            "maxLength": 50,
            "type": "string",
            "description": "Gets or sets the post office box of the address. The P.O. Box should be transferred including the country-specific text component. For example, for Switzerland \"Postfach 12\" in England \"PO Box 12\".",
            "nullable": true
          },
          "additionalLine1": {
            "maxLength": 50,
            "type": "string",
            "description": "Gets or sets additional line of an address which is neither a street nor a post office box. For example, \"c/o Samuel Schnelli\" or \"Office Samuel Schnelli\".",
            "nullable": true
          },
          "additionalLine2": {
            "maxLength": 200,
            "type": "string",
            "description": "Gets or sets extended additional component of an address that is neither a street nor a post office box. For example, \"Floor 12\" or \"Building 15\".",
            "nullable": true
          },
          "country": {
            "maxLength": 2,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets country in ISO code (ISO 3166)."
          },
          "zipCode": {
            "maxLength": 20,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets zip code of the address in country-specific format. Mandatory together with the country code and the city. For example, \"EC1A 1AA\" for London, England or \"9500\" for Wil, Switzerland."
          },
          "city": {
            "maxLength": 40,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets city."
          },
          "shortAddress": {
            "type": "string",
            "description": "Gets or sets the short address of the address.",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Gets or sets the email address.",
            "nullable": true
          },
          "latitude": {
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "description": "Gets or sets location latitude.",
            "format": "double",
            "nullable": true
          },
          "longitude": {
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "description": "Gets or sets location longitude.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Address format."
      },
      "AssetResourceStoragePlace": {
        "required": [
          "storagePlaceId"
        ],
        "type": "object",
        "properties": {
          "accessoryId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the accessory identifier.",
            "format": "int64",
            "nullable": true
          },
          "machineId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the machine identifier.",
            "format": "int64",
            "nullable": true
          },
          "storagePlaceId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the storage place identifier.",
            "format": "int64"
          }
        },
        "additionalProperties": false,
        "description": "Asset resource storage place mapping entry."
      },
      "AssignmentEnum": {
        "enum": [
          "RENTAL_HANDOVER",
          "RENTAL_RETURN",
          "RENTAL_OTHER"
        ],
        "type": "string",
        "description": "Assigns the surcharge to a specific job process step."
      },
      "CompanyAccount": {
        "required": [
          "active",
          "cashPayment",
          "companyNo",
          "currency",
          "customerNo",
          "privateSurcharge"
        ],
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this entry is active or not."
          },
          "companyNo": {
            "maximum": 999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the number of the company that this entry is assigned to.",
            "format": "int64"
          },
          "customerNo": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the identification number of the customer."
          },
          "currency": {
            "maxLength": 3,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the default currency in ISO 4217 Code (3 digit letter)."
          },
          "salesChannel": {
            "maxLength": 3,
            "type": "string",
            "description": "Gets or sets the sales channel of the customer.",
            "nullable": true
          },
          "cashPayment": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether or not the customer pays cash."
          },
          "privateSurcharge": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether or not the customer pays a B2C surcharge."
          },
          "c4504ChargingType": {
            "maximum": 45049999,
            "minimum": 45040001,
            "type": "integer",
            "description": "Gets or sets a value indicating how the customer pays the bill (single or collective invoice).",
            "format": "int64",
            "nullable": true
          },
          "c1502ChargingPeriodicity": {
            "maximum": 15029999,
            "minimum": 15020001,
            "type": "integer",
            "description": "Gets or sets the periodicity of invoicing.",
            "format": "int64",
            "nullable": true
          },
          "notes": {
            "maxLength": 4000,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets internal notes about the customer.",
            "nullable": true
          },
          "c4570PriceCategory": {
            "maximum": 45709999,
            "minimum": 45700001,
            "type": "integer",
            "description": "Gets or sets the price category for the customer.",
            "format": "int64",
            "nullable": true
          },
          "c27PaymentTerms": {
            "maximum": 279999,
            "minimum": 270001,
            "type": "integer",
            "description": "Gets or sets the code of the payment terms.",
            "format": "int64",
            "nullable": true
          },
          "paymentTerms": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the shortname of the payment terms.",
            "nullable": true
          },
          "costUnit": {
            "maxLength": 20,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the cost unit of the customer.",
            "nullable": true
          },
          "chargingBusinessPartnerAddressId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the internal address number of the customer billed for the services.",
            "format": "int64",
            "nullable": true
          },
          "chargingCustomerId": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the external address id of the customer billed for the services.",
            "nullable": true
          },
          "shippingBusinessPartnerAddressId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the invoice shipping address number for the customer.",
            "format": "int64",
            "nullable": true
          },
          "c126VatExportIndicator": {
            "maximum": 1269999,
            "minimum": 1260001,
            "type": "integer",
            "description": "Gets or sets the code (C126) of the export identifier.",
            "format": "int64",
            "nullable": true
          },
          "c3305SalesArea": {
            "maximum": 33059999,
            "minimum": 33050001,
            "type": "integer",
            "description": "Gets or sets the code of the sales area of the customer.",
            "format": "int64",
            "nullable": true
          },
          "yourRef": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the customer's default reference. This reference appears on the invoice.",
            "nullable": true
          },
          "vatRegistrationNo": {
            "maxLength": 20,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the VAT registration number.",
            "nullable": true
          },
          "attributeValueSet": {
            "$ref": "#/components/schemas/CustomerAttributeValueSet"
          },
          "customerSalesReward": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SalesReward"
            },
            "description": "Gets or sets the sales reward programm for the customer. Each year, a specific rate determines the amount of cashback for the customer.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The company account dto."
      },
      "Contact": {
        "required": [
          "originCode",
          "roleCode"
        ],
        "type": "object",
        "properties": {
          "contactId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the contact identifier.",
            "format": "int64",
            "nullable": true
          },
          "roleCode": {
            "maximum": 45449999,
            "minimum": 45440001,
            "type": "integer",
            "description": "Gets or sets the code 4544 role. Use IF2BA to retrieve the value list.",
            "format": "int64"
          },
          "originCode": {
            "maximum": 69569999,
            "minimum": 69560001,
            "type": "integer",
            "description": "Gets or sets the code 6956 origin. Use IF2BA to retrieve the value list.",
            "format": "int64"
          },
          "fullName": {
            "maxLength": 100,
            "type": "string",
            "description": "Gets or sets the the full name (name + surname).",
            "nullable": true
          },
          "phoneNo": {
            "maxLength": 30,
            "type": "string",
            "description": "Gets or sets the phone number.",
            "nullable": true
          },
          "mobileNo": {
            "maxLength": 30,
            "type": "string",
            "description": "Gets or sets the mobile number.",
            "nullable": true
          },
          "email": {
            "maxLength": 200,
            "type": "string",
            "description": "Gets or sets the email address.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The DTO for contacts."
      },
      "Customer": {
        "required": [
          "businessPartnerAddressId",
          "changeDate",
          "changeId",
          "customerId",
          "modifyDate",
          "modifyUser",
          "origin"
        ],
        "type": "object",
        "properties": {
          "changeId": {
            "type": "integer",
            "description": "Gets or sets change id of the entry.",
            "format": "int64"
          },
          "changeDate": {
            "type": "string",
            "description": "Gets or sets change date of the entry.",
            "format": "date-time"
          },
          "businessPartnerAddressId": {
            "maximum": 9999999999,
            "minimum": 0,
            "type": "integer",
            "description": "Gets or sets address id of the customer.",
            "format": "int64"
          },
          "origin": {
            "maxLength": 10,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets origin of the customer (used together with origin id). Customers created in leva+ will have the origin \"leva+\". They will not have an origin id."
          },
          "customerId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets technical identification number of the customer.",
            "format": "int64"
          },
          "externalCustomerId": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets external id of the customer - set if the customer was created in a third party system.",
            "nullable": true
          },
          "c3341CustomerStatus": {
            "maximum": 33419999,
            "minimum": 33410001,
            "type": "integer",
            "description": "Gets or sets status of the customer. Only customers with the status \"33410030 = customer\" may be used for orders.",
            "format": "int32",
            "nullable": true
          },
          "modifyUser": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets user which modified the entity."
          },
          "modifyDate": {
            "type": "string",
            "description": "Gets or sets date the entity was last modified.",
            "format": "date-time"
          },
          "isConsortium": {
            "type": "boolean",
            "description": "Gets or sets defines whether or not this customer is a consortium.",
            "nullable": true
          },
          "companyAccounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyAccount"
            },
            "description": "Gets or sets list of company accounts this customer is assigned to.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The customer dto."
      },
      "CustomerAttributeValue": {
        "required": [
          "attributeDefinitionId",
          "modifyUser"
        ],
        "type": "object",
        "properties": {
          "attributeValueId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the internal identification of attribute value.",
            "format": "int64",
            "nullable": true
          },
          "attributeDefinitionId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the internal identification of attribute definition.",
            "format": "int64"
          },
          "modifyUser": {
            "maxLength": 30,
            "type": "string",
            "description": "Gets or sets the user who last modified the entry.",
            "nullable": true
          },
          "modifyDate": {
            "type": "string",
            "description": "Gets or sets the date the entry was last modified.",
            "format": "date-time",
            "nullable": true
          },
          "sortNo": {
            "maximum": 9999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the position within the attribute value set.",
            "format": "int64",
            "nullable": true
          },
          "companyNo": {
            "maximum": 999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the company identification of the entry.",
            "format": "int64",
            "nullable": true
          },
          "textValue": {
            "maxLength": 1000,
            "type": "string",
            "description": "Gets or sets the text string value.",
            "nullable": true
          },
          "numberValue": {
            "type": "number",
            "description": "Gets or sets the number or decimal value.",
            "format": "decimal",
            "nullable": true
          },
          "dateValue": {
            "type": "string",
            "description": "Gets or sets the date value.",
            "format": "date-time",
            "nullable": true
          },
          "boolValue": {
            "type": "boolean",
            "description": "Gets or sets the true or false value.",
            "nullable": true
          },
          "codeValue": {
            "type": "integer",
            "description": "Gets or sets the code value.",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The attribute value."
      },
      "CustomerAttributeValueSet": {
        "required": [
          "attributeSetId",
          "modifyUser"
        ],
        "type": "object",
        "properties": {
          "attributeSetId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the internal identification of attribute set.",
            "format": "int64"
          },
          "attributeValueSetId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the internal identification of attribute value set.",
            "format": "int64",
            "nullable": true
          },
          "modifyUser": {
            "maxLength": 30,
            "type": "string",
            "description": "Gets or sets the user who last modified the entry.",
            "nullable": true
          },
          "modifyDate": {
            "type": "string",
            "description": "Gets or sets the date the entry was last modified.",
            "format": "date-time",
            "nullable": true
          },
          "attributeValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerAttributeValue"
            },
            "description": "Gets the list of attribute values.",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "The attribute value set."
      },
      "EquipmentType": {
        "required": [
          "description",
          "origin"
        ],
        "type": "object",
        "properties": {
          "changeId": {
            "type": "integer",
            "description": "Gets the id when the entity was last changed.",
            "format": "int64",
            "nullable": true,
            "readOnly": true
          },
          "changeDate": {
            "type": "string",
            "description": "Gets the date and time when the entity was last changed.",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          },
          "equipmentTypeId": {
            "type": "integer",
            "description": "Gets or sets the technical identification of the equipment type.",
            "format": "int64",
            "nullable": true
          },
          "externalEquipmentTypeId": {
            "type": "string",
            "description": "Gets or sets the external identification of the equipment type - may be used instead of the EquipmentTypeId.",
            "nullable": true
          },
          "origin": {
            "type": "string",
            "description": "Gets or sets origin of the entity.",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the equipment type is active or not."
          },
          "description": {
            "type": "string",
            "description": "Gets or sets the name or designation of the associated equipment type.",
            "nullable": true
          },
          "manufacturerSeries": {
            "type": "string",
            "description": "Gets or sets a string indicating which equipment type series the equipment belongs to.",
            "nullable": true
          },
          "suppliersBusinessAddressId": {
            "type": "integer",
            "description": "Gets or sets the address number of the supplier.",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Equipment type master data."
      },
      "FileDocumentLink": {
        "type": "object",
        "properties": {
          "fileDocumentGuid": {
            "type": "string",
            "description": "Gets or sets the internal guid of the document.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Provides the guid to a saved file. This structure is used to attach previously saved attachments to the application context. e.g. a photo made on a mobile device is saved to performis and then attached to a job or an order as a job or order document."
      },
      "FlexibleTimeSpecificationEnum": {
        "enum": [
          "FIX",
          "ALLDAY",
          "MORNING",
          "AFTERNOON",
          "FROM",
          "UNTIL"
        ],
        "type": "string",
        "description": "The flexible time specification enum."
      },
      "Job": {
        "required": [
          "jobDateTimeFrom",
          "jobDateTimeTo",
          "jobStatusCode",
          "orderId",
          "orderNo",
          "orderTitle",
          "resourceNo",
          "schedulingGroupCode",
          "useCaseCode"
        ],
        "type": "object",
        "properties": {
          "companyNo": {
            "maximum": 999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the number of the company that this entry is assigned to.",
            "format": "int64",
            "nullable": true
          },
          "jobId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the job id of performis/leva+. Will be set internally - leave empty if not known.",
            "format": "int64",
            "nullable": true
          },
          "changeId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the change identifier of the entity.",
            "format": "int64",
            "nullable": true
          },
          "changeDate": {
            "type": "string",
            "description": "Gets or sets the change date of the entity.",
            "format": "date-time",
            "nullable": true
          },
          "reportEmailReceivers": {
            "type": "string",
            "description": "Gets or sets a semicolon-seperated string of e-mail addresses to receive a report copy.",
            "nullable": true
          },
          "workerId": {
            "type": "integer",
            "description": "Gets or sets the internal worker id to which the job is assigned.",
            "format": "int64",
            "nullable": true
          },
          "employeeId": {
            "type": "integer",
            "description": "Gets or sets the internal employee id to which the job is assigned to.",
            "format": "int64",
            "nullable": true,
            "deprecated": true
          },
          "orderId": {
            "type": "integer",
            "description": "Gets or sets the order identifier.",
            "format": "int64"
          },
          "orderNo": {
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the order number.",
            "deprecated": true
          },
          "orderTitle": {
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the order title.",
            "deprecated": true
          },
          "jobDateTimeFrom": {
            "type": "string",
            "description": "Gets or sets the scheduled start date and time for this job.",
            "format": "date-time"
          },
          "jobDateTimeTo": {
            "type": "string",
            "description": "Gets or sets the scheduled end date and time for this job.",
            "format": "date-time"
          },
          "jobDateTimeAccordingSchedule": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the job date and time are according to the schedule."
          },
          "primaryJobLocation": {
            "$ref": "#/components/schemas/JobLocation"
          },
          "resourceNo": {
            "type": "integer",
            "description": "Gets or sets the resource demand number to which this job is assigned. Each order can have multiple resource demands. They are numbered 0001 onwards and are unique within the order (similar to order-line position no., but for resource demands).",
            "format": "int64"
          },
          "schedulingGroupCode": {
            "type": "integer",
            "description": "Gets or sets the code 4542 scheduling group. Use IF2BA to retrieve a list of valid values.",
            "format": "int64"
          },
          "jobStatusCode": {
            "type": "integer",
            "description": "Gets or sets the code 4555 job status. Use IF2BA to retrieve a list of valid values.",
            "format": "int64"
          },
          "resourceTypeCode": {
            "type": "integer",
            "description": "Gets or sets the code 4550 resource type. Use IF2BA to retrieve a list of valid values.",
            "format": "int64",
            "nullable": true
          },
          "resourceStatusCode": {
            "type": "integer",
            "description": "Gets or sets the code 4554 resource status. Use IF2BA to retrieve a list of valid values.",
            "format": "int64",
            "nullable": true
          },
          "machineId": {
            "type": "integer",
            "description": "Gets or sets the internal machine id assigned to this job.",
            "format": "int64",
            "nullable": true
          },
          "trailerMachineId": {
            "type": "integer",
            "description": "Gets or sets the internal trailer machine id assigned to this job.",
            "format": "int64",
            "nullable": true
          },
          "accessoryId": {
            "type": "integer",
            "description": "Gets or sets the external accessory id assigned to this job.",
            "format": "int64",
            "nullable": true
          },
          "useCaseCode": {
            "type": "integer",
            "description": "Gets or sets the code 6951 use case. Use IF2BA to retrieve a list of valid values.",
            "format": "int64",
            "example": 69510030
          },
          "customerId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the technical identification number of the customer.",
            "format": "int64",
            "nullable": true
          },
          "serviceTypeCode": {
            "maximum": 69540003,
            "minimum": 69540001,
            "type": "integer",
            "description": "Gets or sets the code 6954 service type. Use IF2BA to retrieve a list of valid values.",
            "format": "int64",
            "nullable": true
          },
          "description": {
            "maxLength": 2000,
            "type": "string",
            "description": "Gets or sets an optional description such as further instructions for the employee.",
            "nullable": true
          },
          "descriptionShift": {
            "maxLength": 2000,
            "type": "string",
            "description": "Gets or sets an optional shift description such as further instructions for the employee.",
            "nullable": true
          },
          "jobEndComment": {
            "maxLength": 500,
            "type": "string",
            "description": "Gets or sets the the job end comment for the resource.",
            "nullable": true
          },
          "horizontalReach": {
            "maximum": 9999999999.99,
            "minimum": 0,
            "type": "number",
            "description": "Gets or sets the horizontal reach of the resource demand in meters.",
            "format": "decimal",
            "nullable": true
          },
          "boomLength": {
            "maximum": 9999999999.99,
            "minimum": 0,
            "type": "number",
            "description": "Gets or sets the boom length of the resource demand in meters.",
            "format": "decimal",
            "nullable": true
          },
          "workingHeight": {
            "maximum": 9999999999.99,
            "minimum": 0,
            "type": "number",
            "description": "Gets or sets the working height of the resource demand in meters.",
            "format": "decimal",
            "nullable": true
          },
          "durationOfTransferToJobLocation": {
            "maximum": 999.99,
            "minimum": 0,
            "type": "number",
            "description": "Gets or sets the duration of the transfer to the job location of the resource demand in hours.",
            "format": "decimal",
            "nullable": true
          },
          "durationOfTransferFromJobLocation": {
            "maximum": 999.99,
            "minimum": 0,
            "type": "number",
            "description": "Gets or sets the duration of the transfer from the job location of the resource demand in hours.",
            "format": "decimal",
            "nullable": true
          },
          "weight": {
            "maximum": 9999999999,
            "minimum": 0,
            "type": "integer",
            "description": "Gets or sets the weight of the resource demand in kilograms.",
            "format": "int64",
            "nullable": true
          },
          "loadWeight": {
            "maximum": 9999999999,
            "minimum": 0,
            "type": "integer",
            "description": "Gets or sets the load weight of the resource demand in kilograms.",
            "format": "int64",
            "nullable": true
          },
          "lateralReach": {
            "maximum": 9999999999.99,
            "minimum": 0,
            "type": "number",
            "description": "Gets or sets the lateral reach of the resource demand in meters.",
            "format": "decimal",
            "nullable": true
          },
          "maximumLoad": {
            "maximum": 9999999999,
            "minimum": 0,
            "type": "integer",
            "description": "Gets or sets the maximum load of the resource demand in kilograms.",
            "format": "int64",
            "nullable": true
          },
          "deliveredResource": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the resource demand will be delivered."
          },
          "goesToTour": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this resource demand will be processed as part of a tour instead of the original order."
          },
          "details": {
            "$ref": "#/components/schemas/JobDetails"
          }
        },
        "additionalProperties": false,
        "description": "The DTO for the rental jobs."
      },
      "JobAssetResourceStoragePlace": {
        "required": [
          "assetResourceStoragePlace",
          "context",
          "jobId"
        ],
        "type": "object",
        "properties": {
          "jobId": {
            "type": "integer",
            "description": "Gets or sets the job id in which the asset resource storage place was changed.",
            "format": "int64"
          },
          "context": {
            "$ref": "#/components/schemas/ReportingContextEnum"
          },
          "assetResourceStoragePlace": {
            "$ref": "#/components/schemas/AssetResourceStoragePlace"
          }
        },
        "additionalProperties": false,
        "description": "Represents an asset resource storage place change in the context of a rental job."
      },
      "JobBookingActivity": {
        "required": [
          "activityCode"
        ],
        "type": "object",
        "properties": {
          "bookingActivityId": {
            "type": "integer",
            "description": "Gets or sets the unique booking activity id. Other jobs containing the same activity do not have the same job booking activity id.",
            "format": "int64"
          },
          "activityCode": {
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the code 4557 activity code. Use IF2BA to retrieve code values for activities."
          },
          "activity": {
            "maxLength": 150,
            "type": "string",
            "description": "Gets or sets the text of the activity if specified.  NOTE: This may contain free-text for the activity. If the job requires a special activity e.g. 'Assist customer on demand' a planner might replace the regular activity text with anything else (non-translated custom input).",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether usually set to `true`. if set to `false`, the booking activity has been revoked from the job and the employee should no longer be able to submit timestamps on that activity."
          }
        },
        "additionalProperties": false,
        "description": "Job booking activities are the available activities such as 'Loading', 'Unloading', (...) which an employee is able to choose from when adding timestamps on the job."
      },
      "JobCompletion": {
        "required": [
          "completed",
          "jobId"
        ],
        "type": "object",
        "properties": {
          "completionId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the unique id of this completion.",
            "format": "int64",
            "nullable": true
          },
          "jobId": {
            "type": "integer",
            "description": "Gets or sets unique id of job to which this completion is assigned.",
            "format": "int64"
          },
          "completed": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether marks a rental job as completed."
          }
        },
        "additionalProperties": false,
        "description": "A completion for a rental job. Marks a rental as completed and confirms that there is no further submission of any job data expected (e.g. no further surcharges and all handover, returns and reports are complete)."
      },
      "JobDetails": {
        "type": "object",
        "properties": {
          "timeStampList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobTimeStamp"
            },
            "description": "Gets or sets the list of time stamps.",
            "nullable": true
          },
          "reportList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobReport"
            },
            "description": "Gets or sets the list of reports.",
            "nullable": true
          },
          "bookingActivityList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobBookingActivity"
            },
            "description": "Gets or sets the list of booking activities.",
            "nullable": true
          },
          "transportPositionList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobTransportPosition"
            },
            "description": "Gets or sets the list of transport positions.",
            "nullable": true
          },
          "surchargeList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobSurcharge"
            },
            "description": "Gets or sets the list of surcharges.",
            "nullable": true
          },
          "documentList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobDocument"
            },
            "description": "Gets or sets the list of job documents.",
            "nullable": true
          },
          "problemList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobProblem"
            },
            "description": "Gets or sets the list of job problems.",
            "nullable": true
          },
          "schedule": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobScheduleEntry"
            },
            "description": "Gets or sets the list of job schedule entries.",
            "nullable": true
          },
          "heightList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobHeight"
            },
            "description": "Gets or sets the list of job height entries.",
            "nullable": true
          },
          "handover": {
            "$ref": "#/components/schemas/JobHandover"
          },
          "return": {
            "$ref": "#/components/schemas/JobReturn"
          },
          "completion": {
            "$ref": "#/components/schemas/JobCompletion"
          }
        },
        "additionalProperties": false,
        "description": "Detail information on a job such as scheduled activities, contacts and locations."
      },
      "JobDocument": {
        "required": [
          "jobDocumentName",
          "jobId"
        ],
        "type": "object",
        "properties": {
          "jobDocumentId": {
            "type": "integer",
            "description": "Gets or sets the unique id of this job document assignment.",
            "format": "int64",
            "nullable": true
          },
          "jobId": {
            "type": "integer",
            "description": "Gets or sets unique id for the job to which this document is assigned to.",
            "format": "int64"
          },
          "jobDocumentName": {
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the name of the document."
          },
          "jobDocument": {
            "$ref": "#/components/schemas/FileDocumentLink"
          }
        },
        "additionalProperties": false,
        "description": "An existing document linked to the job."
      },
      "JobHandover": {
        "required": [
          "customerBriefed",
          "handoverCompletedDateTime",
          "jobId"
        ],
        "type": "object",
        "properties": {
          "handoverId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the unique identifier for the hand over.",
            "format": "int64",
            "nullable": true
          },
          "jobId": {
            "type": "integer",
            "description": "Gets or sets the id of the job to which this handover is assigned.",
            "format": "int64"
          },
          "workerId": {
            "type": "integer",
            "description": "Gets or sets the internal unique identifer of the worker that created this handover.",
            "format": "int64",
            "nullable": true
          },
          "employeeId": {
            "type": "integer",
            "description": "Gets or sets the internal unique identifer of the employee that created this handover.",
            "format": "int64",
            "nullable": true,
            "deprecated": true
          },
          "handoverCompletedDateTime": {
            "type": "string",
            "description": "Gets or sets the date and time at which the handover is completed.  NOTE: this timestamp typically marks the actual beginning of the rental period.",
            "format": "date-time"
          },
          "customerBriefed": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether or not the customer was explicitly briefed on the machine/accessory."
          },
          "comment": {
            "maxLength": 2000,
            "type": "string",
            "description": "Gets or sets any remarks made by the employee that should be noted on this handover.",
            "nullable": true
          },
          "customerSignature": {
            "$ref": "#/components/schemas/Signature"
          }
        },
        "additionalProperties": false,
        "description": "A handover for a rental job. Confirms that the resource (machine/accessory) has been handed over to the customer. Additional information such as a comment and signature can be supplied."
      },
      "JobHeight": {
        "type": "object",
        "properties": {
          "craneHeightId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the indentifier of the crane height (only one of CraneHeightId, WorkingPlatformHeightId or TruckMountedWorkingPlatformHeightId is set).",
            "format": "int64",
            "nullable": true
          },
          "truckMountedWorkingPlatformHeightId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the indentifier of the truck mounted working platform height (only one of CraneHeightId, WorkingPlatformHeightId or TruckMountedWorkingPlatformHeightId is set).",
            "format": "int64",
            "nullable": true
          },
          "workingPlatformHeightId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the indentifier of the working platform height (only one of CraneHeightId, WorkingPlatformHeightId or TruckMountedWorkingPlatformHeightId is set).",
            "format": "int64",
            "nullable": true
          },
          "craneJobHeightCode": {
            "maximum": 45589999,
            "minimum": 45580001,
            "type": "integer",
            "description": "Gets or sets the 4558 crane job height code (only one of CraneJobHeightCode, TruckMountedWorkingPlatformJobHeightCode or WorkingPlatformJobHeightCode is set).",
            "format": "int64",
            "nullable": true
          },
          "truckMountedWorkingPlatformJobHeightCode": {
            "maximum": 33089999,
            "minimum": 33080001,
            "type": "integer",
            "description": "Gets or sets the 3308 truck mounted working platform job height code (only one of CraneJobHeightCode, TruckMountedWorkingPlatformJobHeightCode or WorkingPlatformJobHeightCode is set).",
            "format": "int64",
            "nullable": true
          },
          "workingPlatformJobHeightCode": {
            "maximum": 45599999,
            "minimum": 45590001,
            "type": "integer",
            "description": "Gets or sets the 4559 working platform job height code (only one of CraneJobHeightCode, TruckMountedWorkingPlatformJobHeightCode or WorkingPlatformJobHeightCode is set).",
            "format": "int64",
            "nullable": true
          },
          "height": {
            "maximum": 9999999999.99,
            "minimum": 0,
            "type": "number",
            "description": "Gets or sets the job height in meters.",
            "format": "decimal"
          },
          "additionalInformation": {
            "maxLength": 100,
            "type": "string",
            "description": "Gets or sets the additional information.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Height information of a job."
      },
      "JobLocation": {
        "type": "object",
        "properties": {
          "locationId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets unique identifier of job location.",
            "format": "int64",
            "nullable": true,
            "example": 8392
          },
          "description": {
            "maxLength": 100,
            "type": "string",
            "description": "Gets or sets location description.",
            "nullable": true,
            "example": "Construction Site, Gate 4"
          },
          "transportRestriction": {
            "maxLength": 500,
            "type": "string",
            "description": "Gets or sets transport restriction information as text.",
            "nullable": true,
            "example": "limited height 4.5 meteres at gate 3, prefer gate 4 (no height limit)."
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          }
        },
        "additionalProperties": false,
        "description": "Location information for leva+ (address, additional information such as restrictions, ect.)."
      },
      "JobProblem": {
        "required": [
          "active",
          "customersFault",
          "description",
          "jobId",
          "problemType",
          "reportedByEmployee",
          "reportedDateTime",
          "reportingContext",
          "reportingContextText",
          "resourceConditionCode",
          "solved",
          "visibleForCustomer"
        ],
        "type": "object",
        "properties": {
          "problemId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the unique identifier for this problem.",
            "format": "int64",
            "nullable": true,
            "example": 583911
          },
          "active": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether indicates whether or not the problem is active. Inactive means that the entry has been deleted."
          },
          "jobId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets unique identifier for the job to which this problem is assigned.",
            "format": "int64",
            "example": 452341
          },
          "problemType": {
            "maximum": 1,
            "minimum": 0,
            "type": "integer",
            "description": "Gets or sets the problem type (0 = damage, 1 = defect).",
            "format": "int64"
          },
          "description": {
            "maxLength": 200,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the title and or description of the problem.",
            "example": "various impact dents on the left front side."
          },
          "resourceConditionCode": {
            "maximum": 33429999,
            "minimum": 33420001,
            "type": "integer",
            "description": "Gets or sets the code 3342 resource condition. Use IF2BA to retrieve a list of valid values.",
            "format": "int64"
          },
          "visibleForCustomer": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether wether or not the problem is visible for the customer."
          },
          "customersFault": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether wether or not the problem was caused by the customer and actually is customers fault."
          },
          "comment": {
            "maxLength": 500,
            "type": "string",
            "description": "Gets or sets any further comment/description on the problem.",
            "nullable": true
          },
          "solved": {
            "type": "boolean",
            "description": "`Gets or sets a value indicating whether true` if the problem has been solved."
          },
          "reportedByEmployee": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the internal identifier for the employee.",
            "example": "363"
          },
          "reportedDateTime": {
            "type": "string",
            "description": "Gets or sets the date and time at which the problem is noted.",
            "format": "date-time",
            "example": "2012-04-23T18:25:43.511Z"
          },
          "reportingContext": {
            "$ref": "#/components/schemas/ReportingContextEnum"
          },
          "reportingContextText": {
            "maxLength": 200,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets additional context information (e.g. reported by mobile device).",
            "example": "Custom Job Application"
          }
        },
        "additionalProperties": false,
        "description": "On a job problem specific conditions or issues related to the resource (machine/accessory) are stored. They may be submitted in the initial job to clarify existing issues that can be mentioned on handover, or additional job problems are submitted during handover or return to better clarify wether or not something is caused by the customer."
      },
      "JobRentalScheduling": {
        "type": "object",
        "properties": {
          "jobId": {
            "type": "integer",
            "description": "Gets or sets the unique identifier for the job to which this scheduling is assigned.",
            "format": "int64"
          },
          "accessoryId": {
            "type": "integer",
            "description": "Gets or sets the new unique identifier of the accessory that should be scheduled for this job.\r\nEither `AccessoryId` or `MachineId` must be set.",
            "format": "int64",
            "nullable": true
          },
          "machineId": {
            "type": "integer",
            "description": "Gets or sets the new unique identifier of the machine that should be scheduled for this job.\r\nEither `AccessoryId` or `MachineId` must be set.",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Mapping between a job and the scheduled resource."
      },
      "JobReport": {
        "required": [
          "jobId",
          "reportFromDate",
          "reportToDate"
        ],
        "type": "object",
        "properties": {
          "reportId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the internal unique report id.",
            "format": "int64",
            "nullable": true
          },
          "jobId": {
            "type": "integer",
            "description": "Gets or sets the internal unique job id.",
            "format": "int64"
          },
          "reportFromDate": {
            "type": "string",
            "description": "Gets or sets the begin of reporting time span.",
            "format": "date-time"
          },
          "reportToDate": {
            "type": "string",
            "description": "Gets or sets the end of reporting time span.",
            "format": "date-time"
          },
          "comment": {
            "type": "string",
            "description": "Gets or sets additional comments on the report (usually visible on report) and for backoffice.",
            "nullable": true
          },
          "externalRef": {
            "type": "string",
            "description": "Gets or sets the external reference of this report (e.g. an external service record number).",
            "nullable": true
          },
          "reportPdfFileDocumentLink": {
            "$ref": "#/components/schemas/FileDocumentLink"
          },
          "reportTimeStampList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobReportTimeStamp"
            },
            "description": "Gets or sets the list of report time stamps.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The DTO for the rental job report.\r\nThis file is going to be extended / autogenerated from the IF2LEVA definition at some point in the future.\r\nTherefore it is not fully documented."
      },
      "JobReportTimeStamp": {
        "required": [
          "source",
          "timeStamp",
          "timeStampTypeCode"
        ],
        "type": "object",
        "properties": {
          "jobReportTimeStampId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the unique identifier for the job report time stamp.",
            "format": "int64",
            "nullable": true
          },
          "timeStamp": {
            "type": "string",
            "description": "Gets or sets the time stamp associated with the job.",
            "format": "date-time"
          },
          "timeStampTypeCode": {
            "type": "integer",
            "description": "Gets or sets code 4556. The type of the time stamp (TimeStampType).",
            "format": "int64"
          },
          "source": {
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the source identifier of entry origin."
          },
          "bookingActivityId": {
            "type": "integer",
            "description": "Gets or sets the identifier for resource booking activity.",
            "format": "int64",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "description": "Gets or sets a comment associated with the time stamp.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The DTO for the rental job report time stamp.\r\nThis file is going to be extended / autogenerated from the IF2LEVA definition at some point in the future.\r\nTherefore it is not fully documented."
      },
      "JobReturn": {
        "required": [
          "damage",
          "jobId"
        ],
        "type": "object",
        "properties": {
          "returnId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the unique id of this return.",
            "format": "int64",
            "nullable": true
          },
          "jobId": {
            "type": "integer",
            "description": "Gets or sets the unique id of job to which this return is assigned.",
            "format": "int64"
          },
          "workerId": {
            "type": "integer",
            "description": "Gets or sets the internal unique identifer of the worker that created this return.",
            "format": "int64",
            "nullable": true
          },
          "employeeId": {
            "type": "integer",
            "description": "Gets or sets the internal unique identifer of the employee that created this return.",
            "format": "int64",
            "nullable": true,
            "deprecated": true
          },
          "returnStartedDateTime": {
            "type": "string",
            "description": "Gets or sets the actual date time at which the return process started.",
            "format": "date-time"
          },
          "jobEndDateTime": {
            "type": "string",
            "description": "Gets or sets the actual job end date of the rental.",
            "format": "date-time",
            "nullable": true
          },
          "damage": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether damage is detected on return."
          },
          "comment": {
            "maxLength": 2000,
            "type": "string",
            "description": "Gets or sets any additional information noted by the employee for this return.",
            "nullable": true
          },
          "customerSignature": {
            "$ref": "#/components/schemas/Signature"
          }
        },
        "additionalProperties": false,
        "description": "A return for a rental job. Confirms that the resource (machine/accessory) has been returned/picked up. Additional information such as a comment or whether or not the resource has been damaged is submitted."
      },
      "JobScheduleEntry": {
        "required": [
          "activityCode"
        ],
        "type": "object",
        "properties": {
          "scheduleEntryId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the unique internal identifier for this job schedule entry.",
            "format": "int64",
            "nullable": true,
            "example": 32345
          },
          "activityCode": {
            "type": "integer",
            "description": "Gets or sets the code 4557. Use IF2BA to retrieve code values for activities.",
            "format": "int64",
            "example": 45570018
          },
          "activity": {
            "type": "string",
            "description": "Gets or sets the text of the activity if specified.",
            "nullable": true,
            "example": "Unloading"
          },
          "dateTime": {
            "type": "string",
            "description": "Gets or sets the time of the schedule activity.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-12-01T07:30:00"
          }
        },
        "additionalProperties": false,
        "description": "Entries such as 'Job start', 'Job end', (...) which are on the schedule of the job."
      },
      "JobSurcharge": {
        "required": [
          "assignment",
          "dateTime",
          "quantity",
          "surchargeId"
        ],
        "type": "object",
        "properties": {
          "jobSurchargeId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the unique identifier for this job surcharge.",
            "format": "int64",
            "nullable": true,
            "example": 483915
          },
          "surchargeId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the unique id of the surcharge (master data).",
            "format": "int64",
            "example": 8739145
          },
          "jobId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the unique id of the referenced job.",
            "format": "int64",
            "nullable": true,
            "example": 82916
          },
          "dateTime": {
            "type": "string",
            "description": "Gets or sets when the surcharge was recorded.",
            "format": "date-time",
            "example": "2012-04-23T18:25:43.511Z"
          },
          "assignment": {
            "$ref": "#/components/schemas/AssignmentEnum"
          },
          "quantity": {
            "type": "number",
            "description": "Gets or sets the quantity in price unit of measure given by the base-surcharge.",
            "format": "decimal",
            "example": 23.5
          },
          "comment": {
            "maxLength": 2000,
            "type": "string",
            "description": "Gets or sets the optional comment by the employee who submitted the surcharge.",
            "nullable": true,
            "example": "reason for quantity: additional gas can filled on customers request."
          },
          "reportId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the report id which contains this surcharge entry. Surcharges are generally created during the entire job process. Reports collect them for invoicing. If a surcharge is not assigned to a report, it is not considered for billing. When the job surcharge id is provided on job report creation, report id field will be filled by the back end.",
            "format": "int64",
            "nullable": true,
            "example": 456223
          }
        },
        "additionalProperties": false,
        "description": "Surcharge recorded on a job that is either entered by the employee (e.g. gas refilling in liters) or generated by the system (e.g. overtime surcharge)."
      },
      "JobTimeStamp": {
        "required": [
          "jobId",
          "timeStamp",
          "timeStampTypeCode"
        ],
        "type": "object",
        "properties": {
          "jobTimeStampId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the unique identifier for the job timestamp.",
            "format": "int64",
            "nullable": true
          },
          "jobId": {
            "type": "integer",
            "description": "Gets or sets the unique identifier for the job onto which the time stamp is assigned.",
            "format": "int64"
          },
          "timeStamp": {
            "type": "string",
            "description": "Gets or sets the timestamp associated with the job.",
            "format": "date-time"
          },
          "timeStampTypeCode": {
            "type": "integer",
            "description": "Gets or sets code 4556. The type of timestamp (TimestampType).",
            "format": "int64"
          },
          "bookingActivityId": {
            "type": "integer",
            "description": "Gets or sets the identifier for resource booking activity.",
            "format": "int64",
            "nullable": true
          },
          "machineId": {
            "type": "integer",
            "description": "Gets or sets the identifier for the machine.",
            "format": "int64",
            "nullable": true
          },
          "workerId": {
            "type": "integer",
            "description": "Gets or sets the internal identifier for the worker.",
            "format": "int64",
            "nullable": true
          },
          "employeeId": {
            "type": "integer",
            "description": "Gets or sets the internal identifier for the employee.",
            "format": "int64",
            "nullable": true,
            "deprecated": true
          },
          "comment": {
            "type": "string",
            "description": "Gets or sets a comment associated with the timestamp.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The DTO for the rental job time stamps.\r\nThis file is going to be extended / autogenerated from the IF2LEVA definition at some point in the future.\r\nTherefore it is not fully documented."
      },
      "JobTransportPosition": {
        "required": [
          "jobId"
        ],
        "type": "object",
        "properties": {
          "transportPositionId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets internal unique id for this job transport position.",
            "format": "int64",
            "nullable": true
          },
          "jobId": {
            "type": "integer",
            "description": "Gets or sets unique job id.",
            "format": "int64"
          },
          "accessoryId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the accessory id.",
            "format": "int64",
            "nullable": true
          },
          "machineId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the machine id.",
            "format": "int64",
            "nullable": true
          },
          "weight": {
            "type": "number",
            "description": "Gets or sets the weight (in kilograms) of the transport.",
            "format": "decimal",
            "nullable": true
          },
          "length": {
            "type": "number",
            "description": "Gets or sets the length (in meters) of the transport.",
            "format": "decimal",
            "nullable": true
          },
          "width": {
            "type": "number",
            "description": "Gets or sets the width (in meters) of the transport.",
            "format": "decimal",
            "nullable": true
          },
          "height": {
            "type": "number",
            "description": "Gets or sets the height (in meters) of the transport.",
            "format": "decimal",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Gets or sets description of good.",
            "nullable": true
          },
          "unitOfMeasure": {
            "type": "string",
            "description": "Gets or sets unit of measurement in wich the quantity is transported.",
            "nullable": true
          },
          "decimalCount": {
            "type": "integer",
            "description": "Gets or sets amount of decimals in quantity allowed for this unit of measurement.",
            "format": "int32",
            "nullable": true
          },
          "transportQuantity": {
            "type": "number",
            "description": "Gets or sets the transport quantity.",
            "format": "double",
            "nullable": true
          },
          "loadedQuantity": {
            "type": "number",
            "description": "Gets or sets loaded quantity can be different from the transport quantity. Use-case is under or over-delivery.",
            "format": "double",
            "nullable": true
          },
          "unloadedQuantity": {
            "type": "number",
            "description": "Gets or sets unloaded quantity can be different from the transport quantity. Use-case is under or over-delivery.",
            "format": "double",
            "nullable": true
          },
          "loadingDateTime": {
            "type": "string",
            "description": "Gets or sets planned loading date and time.",
            "format": "date-time",
            "nullable": true
          },
          "loadingCompleted": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether indicates whether the loading was completed."
          },
          "unloadingDateTime": {
            "type": "string",
            "description": "Gets or sets planned unloading date and time.",
            "format": "date-time",
            "nullable": true
          },
          "unloadingCompleted": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether indicates whether the unloading was completed."
          },
          "loadingFlexibleTimeSpecification": {
            "$ref": "#/components/schemas/FlexibleTimeSpecificationEnum"
          },
          "unloadingFlexibleTimeSpecification": {
            "$ref": "#/components/schemas/FlexibleTimeSpecificationEnum"
          },
          "rentalJobId": {
            "type": "integer",
            "description": "Gets or sets is set, when the current transport demand (assigned resource) points to a rental job.",
            "format": "int64",
            "nullable": true
          },
          "originalRentalOrderId": {
            "type": "integer",
            "description": "Gets or sets the original rental order id of this transport demand.",
            "format": "int64",
            "nullable": true
          },
          "transportType": {
            "type": "string",
            "description": "Gets or sets the type of transport this transport demand is part of: 'DELIVERY' (outward transport), 'PICK-UP' (return transport), 'TRANSFER' (relocation).",
            "nullable": true
          },
          "loadingGroupNo": {
            "type": "integer",
            "description": "Gets or sets the number of the loading group.",
            "format": "int32",
            "nullable": true
          },
          "loadingSequenceNo": {
            "type": "integer",
            "description": "Gets or sets the number of the loading sequence (order of position within group/tour point).",
            "format": "int32",
            "nullable": true
          },
          "unloadingGroupNo": {
            "type": "integer",
            "description": "Gets or sets the number of the unloading group.",
            "format": "int32",
            "nullable": true
          },
          "unloadingSequenceNo": {
            "type": "integer",
            "description": "Gets or sets the number of the unloading sequence (order of position within group/tour point).",
            "format": "int32",
            "nullable": true
          },
          "pickupLocation": {
            "$ref": "#/components/schemas/Address"
          },
          "deliveryLocation": {
            "$ref": "#/components/schemas/Address"
          }
        },
        "additionalProperties": false,
        "description": "Job transport position specifies what, how much, needs to go where and when."
      },
      "JobTransportPositionChecklist": {
        "required": [
          "jobId",
          "transportPositionId"
        ],
        "type": "object",
        "properties": {
          "transportPositionId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the internal unique id for this job transport position.",
            "format": "int64"
          },
          "jobId": {
            "type": "integer",
            "description": "Gets or sets the unique job id.",
            "format": "int64"
          },
          "loadingCompleted": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether indicates whether the loading was completed."
          },
          "unloadingCompleted": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether indicates whether the unloading was completed."
          }
        },
        "additionalProperties": false,
        "description": "Job transport position checklist specifies which transport demand has been loaded and or unloaded. Any transport from point A to B contains a loading and unloading completed status that can be set by the user."
      },
      "Machine": {
        "required": [
          "active",
          "description",
          "isExternalResource",
          "placingOnMarket"
        ],
        "type": "object",
        "properties": {
          "changeId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets change id of the entity.",
            "format": "int64",
            "nullable": true
          },
          "changeDate": {
            "type": "string",
            "description": "Gets or sets the change date of the entity.",
            "format": "date-time",
            "nullable": true
          },
          "machineId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the internal technical key for the machine.",
            "format": "int64",
            "nullable": true,
            "example": 4711
          },
          "externalMachineId": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the external technical key for the machine - may be used instead of Infosystem.Leva.WebApi.IF2Leva.Controllers.Dtos.Machine.Machine.MachineId.",
            "nullable": true,
            "example": "ABC-4711"
          },
          "origin": {
            "maxLength": 10,
            "type": "string",
            "description": "Gets or sets the origin of the entity.",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether sets whether or not the machine may be used in leva+.",
            "example": true
          },
          "description": {
            "maxLength": 200,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the description (e.g. name, type, number) of the machine.",
            "example": "Genie RS-1932, Blue Version."
          },
          "placingOnMarket": {
            "type": "string",
            "description": "Gets or sets the date when the machine was first registered and used in the business. Important for service dates etc.",
            "format": "date-time",
            "example": "2022-01-11"
          },
          "equipmentTypeId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the identification number for Infosystem.Leva.WebApi.IF2Leva.Controllers.Dtos.Machine.EquipmentType.",
            "format": "int64",
            "nullable": true,
            "example": 4711
          },
          "machineGuid": {
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the unique identifier for a machine. Used for communication with third party systems.",
            "nullable": true,
            "example": "87315090-9a06-4edc-8fc5-f9f68972e3c6"
          },
          "machineNo": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the identification number for a single machine.",
            "format": "int64",
            "nullable": true,
            "example": 87315
          },
          "acquisitionDate": {
            "type": "string",
            "description": "Gets or sets the date the machine was acquired.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-11-25"
          },
          "underWarrantyUntil": {
            "type": "string",
            "description": "Gets or sets the warranty expiry date.",
            "format": "date-time",
            "nullable": true,
            "example": "2028-11-11"
          },
          "manufacturerCode": {
            "maximum": 45439999,
            "minimum": 45430000,
            "type": "integer",
            "description": "Gets or sets the c4543 code of the machine manufacturer.",
            "format": "int64",
            "nullable": true,
            "example": 45430010
          },
          "masterNumber": {
            "maxLength": 100,
            "type": "string",
            "description": "Gets or sets a master number is used to assign and identify the vehicle.",
            "nullable": true,
            "example": "325.752.721"
          },
          "chassisNumber": {
            "maxLength": 100,
            "type": "string",
            "description": "Gets or sets the chassis number of this vehicle.",
            "nullable": true,
            "example": "WMG6315L4FZ010120"
          },
          "engineNumber": {
            "maxLength": 100,
            "type": "string",
            "description": "Gets or sets the number on the engine.",
            "nullable": true,
            "example": "D - 0 000 123"
          },
          "typeCertificateNumber": {
            "maxLength": 100,
            "type": "string",
            "description": "Gets or sets the official number for identification of the vehicle type by external entities.",
            "nullable": true,
            "example": "123123"
          },
          "licensePlate": {
            "maxLength": 20,
            "type": "string",
            "description": "Gets or sets the number on the licence plate.",
            "nullable": true,
            "example": "BE 1000"
          },
          "wikiUrl": {
            "maxLength": 200,
            "type": "string",
            "description": "Gets or sets the URL to information portal.",
            "nullable": true
          },
          "ownerCompanyNo": {
            "maximum": 999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the number of the holder company.",
            "format": "int64",
            "nullable": true,
            "example": 1235
          },
          "assetNo": {
            "maxLength": 16,
            "type": "string",
            "description": "Gets or sets the accounting asset number.",
            "nullable": true,
            "example": "1546"
          },
          "ownerBusinessPartnerAddressId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the address number of the owner.",
            "format": "int64",
            "nullable": true,
            "example": 12345
          },
          "locationBusinessPartnerAddressId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the address number of the location.",
            "format": "int64",
            "nullable": true,
            "example": 12345
          },
          "invoiceBusinessPartnerAddressId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the address number of the customer to invoice.",
            "format": "int64",
            "nullable": true,
            "example": 12345
          },
          "regularDriverBusinessPartnerId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the business partner ID of the regular driver.",
            "format": "int64",
            "nullable": true,
            "example": 12345
          },
          "counterGroupCode": {
            "maximum": 45469999,
            "minimum": 45460000,
            "type": "integer",
            "description": "Gets or sets the c4546 code of the counter group.",
            "format": "int64",
            "nullable": true,
            "example": 45460010
          },
          "standardTrailerMachineId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the identification number of the semi-trailer that is usually coupled with this machine.",
            "format": "int64",
            "nullable": true,
            "example": 5679
          },
          "machineModelCode": {
            "maximum": 45419999,
            "minimum": 45410000,
            "type": "integer",
            "description": "Gets or sets the c4541 code of the machine model, e.g. crane.",
            "format": "int64",
            "example": 45410010
          },
          "branchCode": {
            "maximum": 45629999,
            "minimum": 45620000,
            "type": "integer",
            "description": "Gets or sets the c4562 identification code of the branch to which the machine belongs.",
            "format": "int64",
            "nullable": true,
            "example": 45620010
          },
          "isExternalResource": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether is this machine an external resource?."
          },
          "yearOfManufacture": {
            "type": "integer",
            "description": "Gets or sets the year in which the machine was built.",
            "format": "int64",
            "nullable": true,
            "example": 2020
          },
          "schedulingGroupCode": {
            "maximum": 45429999,
            "minimum": 45420000,
            "type": "integer",
            "description": "Gets or sets the c4542 code of the machine scheduling type.",
            "format": "int64",
            "nullable": true,
            "example": 45420010
          },
          "locationApiKey": {
            "maxLength": 50,
            "type": "string",
            "description": "Gets or sets the API key to access location service for the machine.",
            "nullable": true
          },
          "isMachineLocationSyncEnabled": {
            "type": "boolean",
            "description": "Gets or sets whether or not the machine's location is automatically synced.",
            "nullable": true
          },
          "manufacturerApiCode": {
            "maximum": 33069999,
            "minimum": 33060000,
            "type": "integer",
            "description": "Gets or sets the c3306 code of the used location API connector.",
            "format": "int64",
            "nullable": true,
            "example": 33060010
          },
          "engineType": {
            "maxLength": 200,
            "type": "string",
            "description": "Gets or sets what type of engine the machine has.",
            "nullable": true,
            "example": "Diesel."
          },
          "costCenterNo": {
            "maxLength": 20,
            "type": "string",
            "description": "Gets or sets the number of the cost center this machine is billed internally to.",
            "nullable": true,
            "example": "56789"
          },
          "telematicsDeviceGroupCode": {
            "maximum": 33369999,
            "minimum": 33360000,
            "type": "integer",
            "description": "Gets or sets the c3336 code defining which telematics system the machine uses.",
            "format": "int64",
            "nullable": true,
            "example": 33360010
          },
          "lastYearlyService": {
            "type": "string",
            "description": "Gets or sets the date of the machine's last yearly service.",
            "nullable": true,
            "example": "2023-01-12"
          },
          "dimensionsAttributeValueSet": {
            "$ref": "#/components/schemas/MachineAttributeValueSet"
          },
          "additionalInformationAttributeValueSet": {
            "$ref": "#/components/schemas/MachineAttributeValueSet"
          },
          "typeOfDrives": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TypeOfDrive"
            },
            "description": "Gets or sets the list of type of drives of the machine.",
            "nullable": true
          },
          "schedulingGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SchedulingGroup"
            },
            "description": "Gets or sets the list of additional scheduling groups. A scheduling group combines machines of the same type and use\r\n(not necessarily the same model or manufacturer). (E.g. a 20m boom, might be sold as 12m boom).",
            "nullable": true
          },
          "drivers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MachineDriver"
            },
            "description": "Gets or sets the list of the business partner IDs of the driver/s that can use this machine.",
            "nullable": true
          },
          "counters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MachineCounter"
            },
            "description": "Gets or sets the list of counters of the machine.",
            "nullable": true
          },
          "usages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MachineUsage"
            },
            "description": "Gets or sets the list of applications this machine is used in.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Machine entity."
      },
      "MachineAttributeValue": {
        "required": [
          "attributeDefinitionId",
          "modifyUser"
        ],
        "type": "object",
        "properties": {
          "attributeValueId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the internal identification of attribute value.",
            "format": "int64",
            "nullable": true
          },
          "attributeDefinitionId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the internal identification of attribute definition.",
            "format": "int64"
          },
          "modifyUser": {
            "maxLength": 30,
            "type": "string",
            "description": "Gets or sets the user who last modified the entry.",
            "nullable": true
          },
          "modifyDate": {
            "type": "string",
            "description": "Gets or sets the date the entry was last modified.",
            "format": "date-time",
            "nullable": true
          },
          "sortNo": {
            "maximum": 9999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the position within the attribute value set.",
            "format": "int64",
            "nullable": true
          },
          "companyNo": {
            "maximum": 999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the company identification of the entry.",
            "format": "int64",
            "nullable": true
          },
          "textValue": {
            "maxLength": 1000,
            "type": "string",
            "description": "Gets or sets the text string value.",
            "nullable": true
          },
          "numberValue": {
            "type": "number",
            "description": "Gets or sets the number or decimal value.",
            "format": "decimal",
            "nullable": true
          },
          "dateValue": {
            "type": "string",
            "description": "Gets or sets the date value.",
            "format": "date-time",
            "nullable": true
          },
          "boolValue": {
            "type": "boolean",
            "description": "Gets or sets the `true` or `false` value.",
            "nullable": true
          },
          "codeValue": {
            "type": "integer",
            "description": "Gets or sets the code value.",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The attribute value."
      },
      "MachineAttributeValueSet": {
        "required": [
          "attributeSetId",
          "modifyUser"
        ],
        "type": "object",
        "properties": {
          "attributeSetId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the internal identification of attribute set.",
            "format": "int64"
          },
          "attributeValueSetId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the internal identification of attribute value set.",
            "format": "int64",
            "nullable": true
          },
          "modifyUser": {
            "maxLength": 30,
            "type": "string",
            "description": "Gets or sets the user who last modified the entry.",
            "nullable": true
          },
          "modifyDate": {
            "type": "string",
            "description": "Gets or sets the date the entry was last modified.",
            "format": "date-time",
            "nullable": true
          },
          "attributeValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MachineAttributeValue"
            },
            "description": "Gets the list of attribute values.",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "The attribute value set."
      },
      "MachineCounter": {
        "required": [
          "counterTypeCode"
        ],
        "type": "object",
        "properties": {
          "counterTypeCode": {
            "maximum": 45489999,
            "minimum": 45480000,
            "type": "integer",
            "description": "Gets or sets the c4548 code of the counter type used in the machine, e.g. km, hours of operation.",
            "format": "int64",
            "example": 45480010
          },
          "account": {
            "maxLength": 10,
            "type": "string",
            "description": "Gets or sets the account to post the counters against.",
            "nullable": true,
            "example": "4711"
          }
        },
        "additionalProperties": false,
        "description": "Entity \"Machine Counter\"."
      },
      "MachineDriver": {
        "type": "object",
        "properties": {
          "driverBpId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the business partner identifier of the driver.",
            "format": "int64",
            "nullable": true,
            "example": 57689
          }
        },
        "additionalProperties": false,
        "description": "Entity \"Machine Driver\" for query operations."
      },
      "MachineUsage": {
        "type": "object",
        "properties": {
          "application": {
            "type": "string",
            "description": "Gets or sets the application this machine is used in.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Entity \"Machine Usage\"."
      },
      "MaintenanceWindow": {
        "type": "object",
        "properties": {
          "maintenanceWindowId": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "readOnly": true
          },
          "active": {
            "type": "boolean"
          },
          "fromDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "untilDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "info": {
            "type": "string",
            "nullable": true
          },
          "clientStartAllowed": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "ProjectStructure": {
        "required": [
          "active",
          "description",
          "modifyDate",
          "modifyUser",
          "origin",
          "type"
        ],
        "type": "object",
        "properties": {
          "changeId": {
            "type": "integer",
            "description": "Gets or sets the change id of the entity.",
            "format": "int64",
            "nullable": true
          },
          "changeDate": {
            "type": "string",
            "description": "Gets or sets the change date of the entity.",
            "format": "date-time",
            "nullable": true
          },
          "origin": {
            "maxLength": 10,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the origin of the entity."
          },
          "active": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether is this entity active or not."
          },
          "modifyUser": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the user which modified the entity last."
          },
          "modifyDate": {
            "type": "string",
            "description": "Gets or sets the date the entity was last modified.",
            "format": "date-time"
          },
          "description": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the title of the project or order."
          },
          "identification": {
            "maxLength": 50,
            "type": "string",
            "description": "Gets or sets the identification (order no or project no).",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/ProjectStructureType"
          },
          "customerId": {
            "type": "integer",
            "description": "Gets or sets the customer id of the project or order.",
            "format": "int64",
            "nullable": true
          },
          "currency": {
            "maxLength": 3,
            "type": "string",
            "description": "Gets or sets the currency in ISO 4217 Code (3 digit letter).",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "description": "Gets or sets the start date of the project or order.",
            "format": "date-time",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "description": "Gets or sets the end date of the project or order.",
            "format": "date-time",
            "nullable": true
          },
          "parent": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the identification string of the parent object. If the object is the root - no parent is given.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The project structure that describes a general project. Projects may originate from various sources."
      },
      "ProjectStructureType": {
        "enum": [
          "PROJECT",
          "ORDER"
        ],
        "type": "string",
        "description": "Defines what type the entry is. While projects are only structural and will never have cost directly associated, orders are used to render services and charge assigned customer. It is possible to create an order without assigning it to a parent project."
      },
      "RentalOrder": {
        "required": [
          "branchCode",
          "orderNo",
          "orderTitle",
          "orderTypeCode",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "orderId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the order identifier.",
            "format": "int64",
            "nullable": true
          },
          "changeId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the change identifier of the entity.",
            "format": "int64",
            "nullable": true
          },
          "changeDate": {
            "type": "string",
            "description": "Gets or sets the change date of the entity.",
            "format": "date-time",
            "nullable": true
          },
          "orderNo": {
            "maxLength": 20,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the order number."
          },
          "orderTitle": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the order title."
          },
          "orderTypeCode": {
            "maximum": 45539999,
            "minimum": 45530001,
            "type": "integer",
            "description": "Gets or sets the code 4553 order type.",
            "format": "int64"
          },
          "statusCode": {
            "maximum": 45520600,
            "minimum": 45520010,
            "type": "integer",
            "description": "Gets or sets the code 4552. Use IF2BA to retrieve the value list.",
            "format": "int64"
          },
          "branchCode": {
            "maximum": 45629999,
            "minimum": 45620000,
            "type": "integer",
            "description": "Gets or sets the code 4562. Use IF2BA to retrieve the value list.",
            "format": "int64"
          },
          "yourReference": {
            "maxLength": 50,
            "type": "string",
            "description": "Gets or sets the custom order reference.",
            "nullable": true
          },
          "visitDate": {
            "type": "string",
            "description": "Gets or sets the visit date.",
            "format": "date-time",
            "nullable": true
          },
          "jobIdList": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Gets or sets a list of job ids that are part of this order.",
            "nullable": true
          },
          "contactList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Contact"
            },
            "description": "Gets or sets a list of contact that are part of this order.",
            "nullable": true
          },
          "orderPhaseList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RentalOrderPhase"
            },
            "description": "Gets or sets a list of order phases that are part of this order.",
            "nullable": true
          },
          "jobOrderLineList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RentalOrderLine"
            },
            "description": "Gets or sets a list of order lines that are part of this order.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The DTO for rental orders."
      },
      "RentalOrderDocument": {
        "required": [
          "orderId",
          "rentalOrderDocumentName"
        ],
        "type": "object",
        "properties": {
          "rentalOrderDocumentId": {
            "type": "integer",
            "description": "Gets or sets the unique id of this rental order document assignment.",
            "format": "int64",
            "nullable": true
          },
          "orderId": {
            "type": "integer",
            "description": "Gets or sets unique id for the rental order to which this document is assigned to.",
            "format": "int64"
          },
          "rentalOrderDocumentName": {
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the name of the document."
          },
          "rentalOrderDocument": {
            "$ref": "#/components/schemas/FileDocumentLink"
          }
        },
        "additionalProperties": false,
        "description": "An existing document linked to a rental order."
      },
      "RentalOrderLine": {
        "required": [
          "orderPhaseId",
          "sortNo"
        ],
        "type": "object",
        "properties": {
          "orderLineId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the order line identifier.",
            "format": "int64",
            "nullable": true
          },
          "orderPhaseId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the order phase identifier.",
            "format": "int64"
          },
          "sortNo": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the order line sorting number.",
            "format": "int64"
          },
          "orderLineDetails": {
            "maxLength": 4000,
            "type": "string",
            "description": "Gets or sets the order line details (rich text format).",
            "nullable": true
          },
          "jobIdList": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Gets or sets a list of job ids that are part of this order line.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The DTO for rental order lines."
      },
      "RentalOrderPhase": {
        "required": [
          "description",
          "shortDescription",
          "sortNo"
        ],
        "type": "object",
        "properties": {
          "orderPhaseId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the order phase identifier.",
            "format": "int64",
            "nullable": true
          },
          "sortNo": {
            "maximum": 999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the order phase sorting number.",
            "format": "int64"
          },
          "shortDescription": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the order phase identifier."
          },
          "description": {
            "maxLength": 4000,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the order phase identifier."
          }
        },
        "additionalProperties": false,
        "description": "The DTO for rental order phases."
      },
      "ReportingContextEnum": {
        "enum": [
          "LEVA.JOB.HANDOVER",
          "LEVA.JOB.RETURN"
        ],
        "type": "string",
        "description": "During which context (process) the problem has been noted."
      },
      "SalesReward": {
        "type": "object",
        "properties": {
          "year": {
            "maxLength": 4,
            "minLength": 4,
            "type": "string",
            "description": "Gets or sets the year the sales reward applies to.",
            "nullable": true
          },
          "rate": {
            "maximum": 99,
            "minimum": 0,
            "type": "number",
            "description": "Gets or sets rate of the sales reward the customer receives.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Sales reward program for customer. Per year, a rate configures the payback reward for the customer."
      },
      "SchedulingGroup": {
        "type": "object",
        "properties": {
          "schedulingGroupCode": {
            "type": "integer",
            "description": "Gets or sets c4542 code of the resource grouping that combines resources of the same type and use\r\n(not necessarily the same model or manufacturer).",
            "format": "int64",
            "example": 45420010
          }
        },
        "additionalProperties": false,
        "description": "Resource scheduling group entity."
      },
      "Signature": {
        "type": "object",
        "properties": {
          "signatureId": {
            "type": "integer",
            "description": "Gets or sets the signature id. Leave empty when creating a new signature entry.",
            "format": "int64",
            "nullable": true
          },
          "signeeName": {
            "maxLength": 100,
            "type": "string",
            "description": "Gets or sets the person who is signing the document. Preferably full name.",
            "nullable": true
          },
          "signaturFileDocumentLink": {
            "$ref": "#/components/schemas/FileDocumentLink"
          }
        },
        "additionalProperties": false,
        "description": "Signature details when available. If not provided: a report, handover or return is considered unsigned."
      },
      "StoragePlace": {
        "type": "object",
        "properties": {
          "changeId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets the id when the entry was last changed.",
            "format": "int64",
            "nullable": true
          },
          "changeDate": {
            "type": "string",
            "description": "Gets the date and time when the entry was last changed.",
            "format": "date-time",
            "nullable": true
          },
          "storagePlaceId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the storage place identifier.",
            "format": "int64"
          },
          "storagePlaceDescription": {
            "maxLength": 400,
            "type": "string",
            "description": "Gets or sets the storage place description.",
            "nullable": true
          },
          "storageLocationId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the storage location identifier.",
            "format": "int64"
          },
          "storageLocationPlaceDescription": {
            "maxLength": 400,
            "type": "string",
            "description": "Gets or sets the storage location description.",
            "nullable": true
          },
          "storageId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the storage identifier.",
            "format": "int64"
          },
          "storageDescription": {
            "maxLength": 400,
            "type": "string",
            "description": "Gets or sets the storage description.",
            "nullable": true
          },
          "companyNo": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the storage company number.",
            "format": "int64"
          },
          "inspectionAfterRental": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether when this storage place is provided on a rental return, an inspection is required afterwards."
          }
        },
        "additionalProperties": false,
        "description": "Storage place entry."
      },
      "Surcharge": {
        "required": [
          "description"
        ],
        "type": "object",
        "properties": {
          "surchargeId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the internal unique identifier for surcharge master data entry.",
            "format": "int64",
            "nullable": true
          },
          "changeId": {
            "type": "integer",
            "description": "Gets or sets the id of the entry.",
            "format": "int64",
            "nullable": true
          },
          "changeDate": {
            "type": "string",
            "description": "Gets or sets the date of the entry.",
            "format": "date-time",
            "nullable": true
          },
          "description": {
            "maxLength": 300,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the title/name of the surcharge."
          },
          "priceUnitOfMeasure": {
            "type": "string",
            "description": "Gets or sets the unit of measure in which quantities for must be submitted.",
            "nullable": true
          },
          "sortNo": {
            "maxLength": 20,
            "type": "string",
            "description": "Gets or sets a sort number order of the surcharge when being displayed (ascending).",
            "nullable": true
          },
          "suggestedQuantity": {
            "type": "number",
            "description": "Gets or sets a quantity in PriceUnitOfMeasure that is usually suggested for this surcharge, so that users must not manually input common a common quantity.",
            "format": "decimal",
            "nullable": true
          },
          "suggestedOnRentalHandover": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether wether or not this surcharge is suggested on rental handovers (e.g. additional instruction or placement)."
          },
          "suggestedOnRentalReturn": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether wether or not this surcharge is suggested on rental returns (e.g. cleaning)."
          }
        },
        "additionalProperties": false,
        "description": "The surcharge dto."
      },
      "TypeOfDrive": {
        "type": "object",
        "properties": {
          "typeOfDrive": {
            "$ref": "#/components/schemas/TypeOfDriveEnum"
          }
        },
        "additionalProperties": false,
        "description": "Entity \"Machine Type of Drive\"."
      },
      "TypeOfDriveEnum": {
        "enum": [
          "B",
          "H",
          "D",
          "E"
        ],
        "type": "string",
        "description": "Typ of drive values.\r\n- `B`: Petrol\r\n- `H`: Hybrid\r\n- `D`: Diesel\r\n- `E`: Electric."
      },
      "Worker": {
        "type": "object",
        "properties": {
          "workerId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the worker identifier.",
            "format": "int64"
          },
          "active": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the entry is active."
          },
          "companyNo": {
            "maximum": 99999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the company number.",
            "format": "int64"
          },
          "employeeId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the employee identifier.",
            "format": "int64"
          },
          "personnelNo": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the personnel number.",
            "format": "int64",
            "nullable": true
          },
          "fullName": {
            "maxLength": 150,
            "type": "string",
            "description": "Gets or sets the the full name (surname + second surname + name).",
            "nullable": true
          },
          "phoneNo": {
            "maxLength": 50,
            "type": "string",
            "description": "Gets or sets the phone number.",
            "nullable": true
          },
          "mobileNo": {
            "maxLength": 50,
            "type": "string",
            "description": "Gets or sets the mobile number.",
            "nullable": true
          },
          "email": {
            "maxLength": 500,
            "type": "string",
            "description": "Gets or sets the email address.",
            "nullable": true
          },
          "branchCode": {
            "maximum": 45629999,
            "minimum": 45620000,
            "type": "integer",
            "description": "Gets or sets the code 4562. Use IF2BA to retrieve the value list.",
            "format": "int64",
            "nullable": true
          },
          "bafEmployeeAttributeValueSet": {
            "$ref": "#/components/schemas/WorkerAttributeValueSet"
          }
        },
        "additionalProperties": false,
        "description": "Worker entity."
      },
      "WorkerAttributeValue": {
        "required": [
          "attributeDefinitionId",
          "modifyUser"
        ],
        "type": "object",
        "properties": {
          "attributeValueId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the internal identification of attribute value.",
            "format": "int64",
            "nullable": true
          },
          "attributeDefinitionId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the internal identification of attribute definition.",
            "format": "int64"
          },
          "modifyUser": {
            "maxLength": 30,
            "type": "string",
            "description": "Gets or sets the user who last modified the entry.",
            "nullable": true
          },
          "modifyDate": {
            "type": "string",
            "description": "Gets or sets the date the entry was last modified.",
            "format": "date-time",
            "nullable": true
          },
          "sortNo": {
            "maximum": 9999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the position within the attribute value set.",
            "format": "int64",
            "nullable": true
          },
          "companyNo": {
            "maximum": 999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the company identification of the entry.",
            "format": "int64",
            "nullable": true
          },
          "textValue": {
            "maxLength": 1000,
            "type": "string",
            "description": "Gets or sets the text string value.",
            "nullable": true
          },
          "numberValue": {
            "type": "number",
            "description": "Gets or sets the number or decimal value.",
            "format": "decimal",
            "nullable": true
          },
          "dateValue": {
            "type": "string",
            "description": "Gets or sets the date value.",
            "format": "date-time",
            "nullable": true
          },
          "boolValue": {
            "type": "boolean",
            "description": "Gets or sets the true or false value.",
            "nullable": true
          },
          "codeValue": {
            "type": "integer",
            "description": "Gets or sets the code value.",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The attribute value."
      },
      "WorkerAttributeValueSet": {
        "required": [
          "attributeSetId",
          "modifyUser"
        ],
        "type": "object",
        "properties": {
          "attributeSetId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the internal identification of attribute set.",
            "format": "int64"
          },
          "attributeValueSetId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the internal identification of attribute value set.",
            "format": "int64",
            "nullable": true
          },
          "modifyUser": {
            "maxLength": 30,
            "type": "string",
            "description": "Gets or sets the user who last modified the entry.",
            "nullable": true
          },
          "modifyDate": {
            "type": "string",
            "description": "Gets or sets the date the entry was last modified.",
            "format": "date-time",
            "nullable": true
          },
          "attributeValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkerAttributeValue"
            },
            "description": "Gets the list of attribute values.",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "The attribute value set."
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "description": "Please enter a valid token",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}
