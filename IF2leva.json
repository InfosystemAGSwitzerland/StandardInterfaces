{
  "openapi": "3.0.1",
  "info": {
    "title": "leva+ internal api",
    "description": "leva+ internal api",
    "contact": {
      "name": "Infosystem AG",
      "email": "info@infosystem.ch"
    },
    "version": "v1"
  },
  "paths": {
    "/api/v1/document-containers": {
      "put": {
        "tags": [
          "documentcontainers"
        ],
        "operationId": "PutDocumentContainer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Infosystem.Baf.SharedTypes.Dtos.Generic.DocumentContainer"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Infosystem.Baf.SharedTypes.Dtos.Generic.DocumentContainer"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Infosystem.Baf.SharedTypes.Dtos.Generic.DocumentContainer"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/document-containers/document": {
      "post": {
        "tags": [
          "documentcontainers"
        ],
        "operationId": "PostDocumentContainerDocument",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Infosystem.Baf.SharedTypes.Dtos.Generic.NewDocumentContainerDocument"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Infosystem.Baf.SharedTypes.Dtos.Generic.NewDocumentContainerDocument"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Infosystem.Baf.SharedTypes.Dtos.Generic.NewDocumentContainerDocument"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/documents/download": {
      "get": {
        "tags": [
          "documents"
        ],
        "operationId": "DownloadDocument",
        "parameters": [
          {
            "name": "documentGuid",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/v1/fulfillment/tour-planning-environments": {
      "get": {
        "tags": [
          "fulfillment"
        ],
        "summary": "Retrieves the environment (e.g. lists of agencies and locations) for the tour planning.",
        "parameters": [
          {
            "name": "companyIds",
            "in": "query",
            "description": "One or more company ids to retrieve the environment for.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.TourPlanning.TourPlanningEnvironment"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/fulfillment/transport-demands": {
      "get": {
        "tags": [
          "fulfillment"
        ],
        "summary": "Retrieves all transport demands matching the request parameters.",
        "parameters": [
          {
            "name": "companyId",
            "in": "query",
            "description": "The company id to retrieve the transport demands for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "agencyId",
            "in": "query",
            "description": "The agency id to retrieve the transport demands for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "The location id to retrieve the transport demands for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Retrieve the transport demands with a loading or unloading time after this date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "until",
            "in": "query",
            "description": "Retrieve the transport demands with a loading or unloading time before this date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "transportTypeIds",
            "in": "query",
            "description": "One or more transport type id to retrieve the transport demands for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "Retrieve the transport demands that match this search term.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includePreDeliveryTransportDemands",
            "in": "query",
            "description": "Optionally include predelivery transport demands.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeUnconfirmedTransportDemands",
            "in": "query",
            "description": "Optionally include unconfirmed transport demands.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Define the amount of transport demands to skip from the result.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Define the maximum amount of transport demands in the result.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.TransportDemand.TransportDemand"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/fulfillment/tour-options": {
      "get": {
        "tags": [
          "fulfillment"
        ],
        "summary": "Retrieves the general tour options for the tour planning.",
        "parameters": [
          {
            "name": "companyId",
            "in": "query",
            "description": "The company id to retrieve the tour options for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "agencyId",
            "in": "query",
            "description": "The agency id to retrieve the tour options for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "The location id to retrieve the tour options for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Checks for existing schedulings after this date.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "until",
            "in": "query",
            "description": "Checks for existing schedulings before this date.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "currentVehicleSchedulingGroupId",
            "in": "query",
            "description": "Currently selected scheduling group of the vehicle. This filters the list of vehicles.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currentTrailerSchedulingGroupId",
            "in": "query",
            "description": "Currently selected scheduling group of the trailer. This filters the list of trailers.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.TourOptions.TourOptions"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/fulfillment/tour-options-for-tour": {
      "get": {
        "tags": [
          "fulfillment"
        ],
        "summary": "Retrieves the tour options for one tours.\r\nThe options are composed by the provided query parameters.",
        "parameters": [
          {
            "name": "tourId",
            "in": "query",
            "description": "The tour id to retrieve the tour options for.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "companyId",
            "in": "query",
            "description": "The currently selected company id of the tour.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "agencyId",
            "in": "query",
            "description": "The currently selected agency id of the tour.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "The currently selected location id of the tour.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vehicleSchedulingGroupId",
            "in": "query",
            "description": "The currently selected vehicle scheduling group id of the tour.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vehicleAssetResourceId",
            "in": "query",
            "description": "The currently selected vehicle asset resource id of the tour.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "trailerSchedulingGroupId",
            "in": "query",
            "description": "The currently selected trailer scheduling group id of the tour.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "trailerAssetResourceId",
            "in": "query",
            "description": "The currently selected trailer asset resource id of the tour.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "driverEmployeeId",
            "in": "query",
            "description": "The currently seleced driver employee id of the tour.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Checks for existing schedulings from and after this date.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "until",
            "in": "query",
            "description": "Checks for existing schedulings before and until this date.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.TourOptions.TourOptions"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/fulfillment/tours": {
      "get": {
        "tags": [
          "fulfillment"
        ],
        "summary": "Retrieves the active tours matching the request parameters.",
        "parameters": [
          {
            "name": "companyId",
            "in": "query",
            "description": "The company id to retrieve the tours for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "agencyId",
            "in": "query",
            "description": "The agency id to retrieve the tours for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "The location id to retrieve the tours for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Retrieve tours on or after this date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "until",
            "in": "query",
            "description": "Retrieve tours on or before this date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "vehicleSchedulingGroupIds",
            "in": "query",
            "description": "Optional vehicle scheduling group ids to retrieve the tours for.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "vehicleAssetResourceIds",
            "in": "query",
            "description": "Optional vehicle asset resource ids to retrieve the tours for.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "driverEmployeeIds",
            "in": "query",
            "description": "Optional driver employee ids to retrieve the tours for.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Define the amount of tours to skip from the result.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Define the maximum amount of tours in the result.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Tour.Tour"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "fulfillment"
        ],
        "summary": "Persists a list of tours.",
        "requestBody": {
          "description": "A list of tours to persist.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Tour.PersistTourRequest"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Tour.PersistTourRequest"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Tour.PersistTourRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Tour.Tour"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/master-data/customers": {
      "get": {
        "tags": [
          "masterdata"
        ],
        "summary": "Retrieves a filtered list of customers.",
        "description": "By passing in the appropriate options, the service searches for customers in the system.",
        "parameters": [
          {
            "name": "searchString",
            "in": "query",
            "description": "Optional search string for looking up a record within the customer number.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip for pagination.",
            "schema": {
              "maximum": 100000,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "changesSinceDateTime",
            "in": "query",
            "description": "Get all the entities which were added/edited since a specific datetime.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "changesSinceChangeId",
            "in": "query",
            "description": "Get all the entities which were added/edited since the provided change id.",
            "schema": {
              "maximum": 9999999999,
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "customerId",
            "in": "query",
            "description": "Retrieve a specific record by internal customer id.",
            "schema": {
              "maximum": 9999999999,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "externalCustomerId",
            "in": "query",
            "description": "Retrieve a specific record by external customer id.",
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          },
          {
            "name": "customerNo",
            "in": "query",
            "description": "Retrieve a specific record by customer number.",
            "schema": {
              "maxLength": 50,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of records to return.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Customer.Customer"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Infosystem.Baf.SharedTypes.Dtos.System.MaintenanceWindow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/api/v1/master-data/customer-company-mappings": {
      "get": {
        "tags": [
          "masterdata"
        ],
        "summary": "Retrieves a filtered list of customer company mappings (Kunde-Mandant).",
        "description": "By passing in the appropriate options, the service searches for customer company mappings in the system.",
        "parameters": [
          {
            "name": "searchString",
            "in": "query",
            "description": "Optional search string for looking up a record within the customer company search term.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip for pagination.",
            "schema": {
              "maximum": 100000,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "companyNo",
            "in": "query",
            "description": "Retrieve specific records by the company number.",
            "schema": {
              "maximum": 99999999,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "customerIds",
            "in": "query",
            "description": "Retrieve specific records by internal customer ids (comma separated string of identifiers).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerCompanyMappingIds",
            "in": "query",
            "description": "Retrieve specific records by internal customer company mapping ids (comma separated string of identifiers).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessPartnerAddressIds",
            "in": "query",
            "description": "Retrieve specific records by business partner address ids (comma separated string of identifiers).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of records to return.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "billingTypes",
            "in": "query",
            "description": "The list of billing types that the resulting customer company mappings can have configured. Only allows values (provide multiple values separated with a \",\"): 'DRITTE', 'INTER' and 'INTRA'.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Customer.Customer"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Infosystem.Baf.SharedTypes.Dtos.System.MaintenanceWindow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/api/v1/master-data/sales-items": {
      "get": {
        "tags": [
          "masterdata"
        ],
        "summary": "Retrieves a filtered list of sales items.",
        "description": "By passing in the appropriate options, the service searches for sales items in the system.",
        "parameters": [
          {
            "name": "searchString",
            "in": "query",
            "description": "Optional search string for looking up a record within the sales item description, short description and article number.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip for pagination.",
            "schema": {
              "maximum": 100000,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "salesItemId",
            "in": "query",
            "description": "Retrieve a specific record by internal sales item id.",
            "schema": {
              "maximum": 9999999999,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "bafArticleId",
            "in": "query",
            "description": "Retrieve a specific record by internal BAF article id.",
            "schema": {
              "maximum": 9999999999,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "bafArticleNo",
            "in": "query",
            "description": "Retrieve a specific record by internal BAF article number.",
            "schema": {
              "maxLength": 20,
              "type": "string"
            }
          },
          {
            "name": "companyNo",
            "in": "query",
            "description": "Retrieve a specific record by the company number.",
            "schema": {
              "maximum": 99999999,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of records to return.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.SalesItem.SalesItem"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Infosystem.Baf.SharedTypes.Dtos.System.MaintenanceWindow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/api/v1/master-data/employees": {
      "get": {
        "tags": [
          "masterdata"
        ],
        "summary": "Retrieves a filtered list of BAF employees.",
        "description": "By passing in the appropriate options, the service searches for BAF employees in the system.",
        "parameters": [
          {
            "name": "companyNo",
            "in": "query",
            "description": "Retrieve specific records by the company number.",
            "schema": {
              "maximum": 99999999,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "Retrieve a specific record by the BAF employee id.",
            "schema": {
              "maximum": 9999999999,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "internalUserId",
            "in": "query",
            "description": "Retrieve a specific record by the internal (performis) user id.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Employee.Employee"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Infosystem.Baf.SharedTypes.Dtos.System.MaintenanceWindow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/api/v1/master-data/codes/{codeType}/{includeDetails}": {
      "get": {
        "tags": [
          "masterdata"
        ],
        "summary": "Get codes.",
        "parameters": [
          {
            "name": "codeType",
            "in": "path",
            "description": "The codeType to retrieve codes for.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "includeDetails",
            "in": "path",
            "description": "If `true` then code details are included.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Code.Code"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Infosystem.Baf.SharedTypes.Dtos.System.MaintenanceWindow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/api/v1/master-data/machines": {
      "get": {
        "tags": [
          "masterdata"
        ],
        "summary": "Retrieves a filtered list of machines.",
        "parameters": [
          {
            "name": "searchString",
            "in": "query",
            "description": "Optional search string for looking up a record within the machine description.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "machineId",
            "in": "query",
            "description": "The internal identifier to retrieve a machine for.",
            "schema": {
              "maximum": 9999999999,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Machine.Machine"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Infosystem.Baf.SharedTypes.Dtos.System.MaintenanceWindow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/api/v1/quality-management/ims/incidents": {
      "get": {
        "tags": [
          "qualitymanagement"
        ],
        "summary": "Searches for IMS incidents.",
        "description": "By passing in the appropriate options, the service searches for available IMS incidents in the system.",
        "parameters": [
          {
            "name": "imsIncidentId",
            "in": "query",
            "description": "Retrieve specific records by IMS incident identifier.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "imsIncidentNo",
            "in": "query",
            "description": "Retrieve specific records by IMS incident number.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.ImsIncident"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Infosystem.Baf.SharedTypes.Dtos.System.MaintenanceWindow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      },
      "put": {
        "tags": [
          "qualitymanagement"
        ],
        "summary": "Persists IMS incidents.",
        "requestBody": {
          "description": "The list of IMS incidents to persist.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.ImsIncident"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.ImsIncident"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.ImsIncident"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.ImsIncident"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Infosystem.Baf.SharedTypes.Dtos.System.MaintenanceWindow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/api/v1/quality-management/ims/subjects": {
      "get": {
        "tags": [
          "qualitymanagement"
        ],
        "summary": "Searches for IMS subjects.",
        "description": "By passing in the appropriate options, the service searches for available IMS subjects in the system.",
        "parameters": [
          {
            "name": "imsSubjectId",
            "in": "query",
            "description": "Retrieve specific records by IMS subject identifier.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "imsIncidentId",
            "in": "query",
            "description": "Retrieve specific records by IMS incident identifier.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.ImsSubject"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Infosystem.Baf.SharedTypes.Dtos.System.MaintenanceWindow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      },
      "put": {
        "tags": [
          "qualitymanagement"
        ],
        "summary": "Persists IMS subjects.",
        "requestBody": {
          "description": "The list of IMS subjects to persist.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.ImsSubject"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.ImsSubject"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.ImsSubject"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.ImsSubject"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Infosystem.Baf.SharedTypes.Dtos.System.MaintenanceWindow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/api/v1/quality-management/ims/impacts": {
      "get": {
        "tags": [
          "qualitymanagement"
        ],
        "summary": "Searches for IMS impacts.",
        "description": "By passing in the appropriate options, the service searches for available IMS impacts in the system.",
        "parameters": [
          {
            "name": "imsImpactId",
            "in": "query",
            "description": "Retrieve specific records by IMS impact identifier. Only one of imsIncidentId, imsSubjectId or imsImpactId should be provided to retrieve impacts.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "imsSubjectId",
            "in": "query",
            "description": "Retrieve specific records by IMS subject identifier. Only one of imsIncidentId, imsSubjectId or imsImpactId should be provided to retrieve impacts.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "imsIncidentId",
            "in": "query",
            "description": "Retrieve specific records by IMS incident identifier. Only one of imsIncidentId, imsSubjectId or imsImpactId should be provided to retrieve impacts.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "companyNo",
            "in": "query",
            "description": "Company number used to retrieve the correct documents on resource problems.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.ImsImpact"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Infosystem.Baf.SharedTypes.Dtos.System.MaintenanceWindow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      },
      "put": {
        "tags": [
          "qualitymanagement"
        ],
        "summary": "Persists IMS impacts.",
        "requestBody": {
          "description": "The list of IMS impacts to persist.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.ImsImpact"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.ImsImpact"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.ImsImpact"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.ImsImpact"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Infosystem.Baf.SharedTypes.Dtos.System.MaintenanceWindow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/api/v1/quality-management/ims/cost-notices": {
      "get": {
        "tags": [
          "qualitymanagement"
        ],
        "summary": "Searches for IMS cost notices.",
        "description": "By passing in the appropriate options, the service searches for available IMS cost notices in the system.",
        "operationId": "GetImsCostNotices",
        "parameters": [
          {
            "name": "initializeNewFromSubject",
            "in": "query",
            "description": "Initializes a new cost notice based on the subject of the provided imsSubjectId.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "imsSubjectId",
            "in": "query",
            "description": "Retrieve specific records by IMS subject identifier (GUID).",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "imsCostNoticeId",
            "in": "query",
            "description": "Retrieve specific record by IMS cost notice identifier (GUID).",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.ImsInvoice"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Infosystem.Baf.SharedTypes.Dtos.System.MaintenanceWindow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      },
      "put": {
        "tags": [
          "qualitymanagement"
        ],
        "summary": "Persists IMS cost notices.",
        "requestBody": {
          "description": "The list of IMS cost notices to persist.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.ImsCostNotice"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.ImsCostNotice"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.ImsCostNotice"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.ImsInvoice"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Infosystem.Baf.SharedTypes.Dtos.System.MaintenanceWindow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/api/v1/quality-management/ims/invoices": {
      "get": {
        "tags": [
          "qualitymanagement"
        ],
        "summary": "Searches for IMS invoices.",
        "description": "By passing in the appropriate options, the service searches for available IMS invoices in the system.",
        "operationId": "GetImsInvoices",
        "parameters": [
          {
            "name": "imsIncidentId",
            "in": "query",
            "description": "Retrieve specific records by IMS incident identifier (GUID).",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "imsSubjectId",
            "in": "query",
            "description": "Retrieve specific records by IMS subject identifier (GUID).",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "imsInvoiceId",
            "in": "query",
            "description": "Retrieve specific record by IMS invoice identifier (GUID).",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.ImsInvoice"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Infosystem.Baf.SharedTypes.Dtos.System.MaintenanceWindow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      },
      "put": {
        "tags": [
          "qualitymanagement"
        ],
        "summary": "Persists IMS invoices.",
        "requestBody": {
          "description": "The list of IMS invoices to persist.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.ImsInvoice"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.ImsInvoice"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.ImsInvoice"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.ImsInvoice"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Infosystem.Baf.SharedTypes.Dtos.System.MaintenanceWindow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/api/v1/quality-management/ims/journal-entries": {
      "get": {
        "tags": [
          "qualitymanagement"
        ],
        "summary": "Searches for journal entries.",
        "description": "By passing in the appropriate options, the service searches for available journal entries in the system.",
        "operationId": "GetJournalEntries",
        "parameters": [
          {
            "name": "imsIncidentId",
            "in": "query",
            "description": "Retrieve specific records by IMS incident identifier (GUID).",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "journalEntryId",
            "in": "query",
            "description": "Retrieve A specific record by its identifier (GUID).",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "companyNo",
            "in": "query",
            "description": "The company number is needed to retrieve the documents referenced to the retrieved journal entries.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.JournalEntry"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Infosystem.Baf.SharedTypes.Dtos.System.MaintenanceWindow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      },
      "put": {
        "tags": [
          "qualitymanagement"
        ],
        "summary": "Persists journal entries.",
        "requestBody": {
          "description": "The list of journal entries to persist.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.JournalEntry"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.JournalEntry"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.JournalEntry"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.JournalEntry"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Infosystem.Baf.SharedTypes.Dtos.System.MaintenanceWindow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/api/v1/quality-management/ims/overview": {
      "get": {
        "tags": [
          "qualitymanagement"
        ],
        "summary": "Searches for IMS overview impacts. These overview records contain also information of the parent elements (subject and incident).",
        "description": "By passing in the appropriate options, the service searches for available IMS overview impacts in the system.",
        "parameters": [
          {
            "name": "searchTerm",
            "in": "query",
            "description": "Retrieve specific records by a search term.",
            "schema": {
              "maxLength": 200,
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Retrieve specific records from a specific date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "until",
            "in": "query",
            "description": "Retrieve specific records until a specific date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "imsIncidentId",
            "in": "query",
            "description": "Retrieve all overview items for a specific incident.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "imsSubjectId",
            "in": "query",
            "description": "Retrieve all overview items for a specific subject.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "imsImpactId",
            "in": "query",
            "description": "Retrieve an overview item for a specific impact.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Define the amount of entries to skip from the result.",
            "schema": {
              "maximum": 100000,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Define the maximum amount of entries in the result.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.ImsOverviewItem"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Infosystem.Baf.SharedTypes.Dtos.System.MaintenanceWindow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/api/v1/quality-management/ims/orders": {
      "get": {
        "tags": [
          "qualitymanagement"
        ],
        "summary": "Searches for orders.",
        "description": "By passing in the appropriate options, the service searches for available orders in the system.",
        "parameters": [
          {
            "name": "searchString",
            "in": "query",
            "description": "Retrieve specific records by a search string.",
            "schema": {
              "maxLength": 2000,
              "type": "string"
            }
          },
          {
            "name": "orderHeaderId",
            "in": "query",
            "description": "Retrieve specific records by the order header id.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Define the amount of entries to skip from the result.",
            "schema": {
              "maximum": 100000,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Define the maximum amount of entries in the result.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.Order"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Infosystem.Baf.SharedTypes.Dtos.System.MaintenanceWindow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/api/v1/quality-management/ims/resource-problems": {
      "put": {
        "tags": [
          "qualitymanagement"
        ],
        "summary": "Persists resource problems.",
        "requestBody": {
          "description": "The list of resource problems to persist.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.ResourceProblem"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.ResourceProblem"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.ResourceProblem"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.ResourceProblem"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Infosystem.Baf.SharedTypes.Dtos.System.MaintenanceWindow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/api/v1/quality-management/ims/sync-resource-problems": {
      "get": {
        "tags": [
          "qualitymanagement"
        ],
        "summary": "Synchronize resource problems with IMS. Creates a new IMS incident/subject/impact for resource problems marked for IMS synchronization.",
        "responses": {
          "200": {
            "description": "OK."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Infosystem.Baf.SharedTypes.Dtos.System.MaintenanceWindow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/api/v1/user/user": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Retrieves the authenticated user incl. its settings for the tour planning.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.User.User"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/v1/user/user-settings": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Retrieves a list of user settings.",
        "parameters": [
          {
            "name": "userSettingKeys",
            "in": "query",
            "description": "A comma-separated list of user settings keys to retrieve.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/System.Collections.Generic.KeyValuePair`2[System.String,System.String]"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Persists a grid setting of the authenticated user.",
        "requestBody": {
          "description": "The settings to persist.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/System.Collections.Generic.KeyValuePair`2[System.String,System.String]"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/System.Collections.Generic.KeyValuePair`2[System.String,System.String]"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/System.Collections.Generic.KeyValuePair`2[System.String,System.String]"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/System.Collections.Generic.KeyValuePair`2[System.String,System.String]"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user/grid-settings/entry/{username}": {
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Persists the grid settings of the authenticated user (this is the legacy baf frontend grid utility endpoint).",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The settings entry.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.User.SettingEntry"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.User.SettingEntry"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.User.SettingEntry"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.User.SettingEntry"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Infosystem.Baf.DotNet.Security.Identity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "internalId": {
            "type": "string",
            "nullable": true
          },
          "language": {
            "type": "string",
            "nullable": true
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Infosystem.Baf.SharedTypes.Dtos.Generic.DocumentContainer": {
        "required": [
          "documentContainerOriginId"
        ],
        "type": "object",
        "properties": {
          "documentContainerOriginCode": {
            "type": "integer",
            "format": "int64"
          },
          "documentContainerOriginId": {
            "type": "string",
            "nullable": true
          },
          "companyNo": {
            "type": "integer",
            "format": "int64"
          },
          "documentContainerFolders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Infosystem.Baf.SharedTypes.Dtos.Generic.DocumentContainerFolder"
            },
            "nullable": true
          },
          "documentContainerDocuments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Infosystem.Baf.SharedTypes.Dtos.Generic.DocumentContainerDocument"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Infosystem.Baf.SharedTypes.Dtos.Generic.DocumentContainerDocument": {
        "required": [
          "documentName"
        ],
        "type": "object",
        "properties": {
          "documentContainerDocumentId": {
            "type": "integer",
            "format": "int64"
          },
          "modifyDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "modifyUser": {
            "type": "string",
            "nullable": true
          },
          "documentContainerFolderId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "sequenceNo": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "documentName": {
            "type": "string",
            "nullable": true
          },
          "documentGuid": {
            "type": "string",
            "format": "uuid"
          },
          "fileExtension": {
            "type": "string",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Infosystem.Baf.SharedTypes.Dtos.Generic.DocumentContainerFolder": {
        "required": [
          "documentContainerFolderName"
        ],
        "type": "object",
        "properties": {
          "documentContainerFolderId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "parentDocumentContainerFolderId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "documentContainerFolderName": {
            "type": "string",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Infosystem.Baf.SharedTypes.Dtos.Generic.NewDocumentContainerDocument": {
        "required": [
          "dataBase64",
          "documentContainerOriginId",
          "documentName",
          "origin"
        ],
        "type": "object",
        "properties": {
          "documentContainerOriginCode": {
            "type": "integer",
            "format": "int64"
          },
          "documentContainerOriginId": {
            "type": "string",
            "nullable": true
          },
          "companyNo": {
            "type": "integer",
            "format": "int64"
          },
          "documentContainerFolderId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "sequenceNo": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "documentName": {
            "type": "string",
            "nullable": true
          },
          "origin": {
            "type": "string",
            "nullable": true
          },
          "documentGuid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "fileExtension": {
            "type": "string",
            "nullable": true
          },
          "dataBase64": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Infosystem.Baf.SharedTypes.Dtos.System.MaintenanceWindow": {
        "type": "object",
        "properties": {
          "maintenanceWindowId": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "readOnly": true
          },
          "active": {
            "type": "boolean"
          },
          "fromDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "untilDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "info": {
            "type": "string",
            "nullable": true
          },
          "clientStartAllowed": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Infosystem.Leva.Access.BusinessPartner.Interface.Address.Address": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Gets or sets the id of the address.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Gets or sets the description of the address.",
            "nullable": true
          },
          "street": {
            "type": "string",
            "description": "Gets or sets the street of the address.",
            "nullable": true
          },
          "houseNo": {
            "type": "string",
            "description": "Gets or sets the house number of the address.",
            "nullable": true
          },
          "addressAddition": {
            "type": "string",
            "description": "Gets or sets the address addition.",
            "nullable": true
          },
          "zipCode": {
            "type": "string",
            "description": "Gets or sets the zip code of the address.",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "Gets or sets the city of the address.",
            "nullable": true
          },
          "country": {
            "type": "string",
            "description": "Gets or sets the country of the address.",
            "nullable": true
          },
          "latitude": {
            "type": "number",
            "description": "Gets or sets the latitude coordinate of the address.",
            "format": "decimal",
            "nullable": true
          },
          "longitude": {
            "type": "number",
            "description": "Gets or sets the longitude coordinate of the address.",
            "format": "decimal",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Data object for a business partner address."
      },
      "Infosystem.Leva.SharedTypes.Enums.QualityManagement.ImsCostNoticeStateEnum": {
        "enum": [
          "I",
          "R",
          "C",
          "E"
        ],
        "type": "string",
        "description": "Defines the state of an IMS cost notice."
      },
      "Infosystem.Leva.WebApi.Internal.Controllers.Dtos.BusinessPartner.Address": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Gets or sets the business partner address id of the address.",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this address is active or not."
          },
          "shortAddress": {
            "type": "string",
            "description": "Gets or sets the short address of the address.",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Gets or sets the email address.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Address format."
      },
      "Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Code.Code": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Gets or sets the unique identifier of the code.",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the code is active."
          },
          "codeTypeId": {
            "type": "string",
            "description": "Gets or sets the ID of the code type.",
            "nullable": true
          },
          "companyNo": {
            "type": "integer",
            "description": "Gets or sets the company number for which the code is valid.",
            "format": "int32"
          },
          "codeNo": {
            "type": "integer",
            "description": "Gets or sets the number of the code.",
            "format": "int64"
          },
          "text": {
            "type": "string",
            "description": "Gets or sets the description of the code.",
            "nullable": true
          },
          "shortText": {
            "type": "string",
            "description": "Gets or sets the optional short description of the code.",
            "nullable": true
          },
          "codedetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Code.CodeDetail"
            },
            "description": "Gets the list of code details.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Data object for a code."
      },
      "Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Code.CodeDetail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Gets or sets the unique identifier of the code detail.",
            "nullable": true
          },
          "codeId": {
            "type": "string",
            "description": "Gets or sets the identifier of the code.",
            "nullable": true
          },
          "detailno": {
            "type": "integer",
            "description": "Gets or sets the number of the code detail.",
            "format": "int32"
          },
          "value": {
            "type": "string",
            "description": "Gets or sets the textual representation of the value of the code detail.",
            "nullable": true
          },
          "valueNumeric": {
            "type": "number",
            "description": "Gets or sets the numeric representation of the value of the code detail, if the value is numeric.",
            "format": "decimal",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Data object for a code detail."
      },
      "Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Customer.Customer": {
        "required": [
          "customerId"
        ],
        "type": "object",
        "properties": {
          "customerId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets technical identification number of the customer.",
            "format": "int64"
          },
          "businessPartnerAddress": {
            "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.BusinessPartner.Address"
          }
        },
        "additionalProperties": false,
        "description": "The customer dto."
      },
      "Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Employee.Employee": {
        "required": [
          "active",
          "companyNo",
          "description",
          "employeeId"
        ],
        "type": "object",
        "properties": {
          "employeeId": {
            "maximum": 9999999999,
            "minimum": 0,
            "type": "integer",
            "description": "Gets or sets the internal unique id.",
            "format": "int64"
          },
          "active": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the employee is active."
          },
          "companyNo": {
            "maximum": 999999,
            "minimum": 0,
            "type": "integer",
            "description": "Gets or sets the company number.",
            "format": "int64"
          },
          "description": {
            "maxLength": 120,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the description of the employee."
          },
          "employeeBusinessPartnerId": {
            "maximum": 9999999999,
            "minimum": 0,
            "type": "integer",
            "description": "Gets or sets the employee business partner id.",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The employee dto."
      },
      "Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.BafInvoice": {
        "type": "object",
        "properties": {
          "invoiceId": {
            "type": "integer",
            "description": "Gets or sets the ID of invoice.",
            "format": "int64"
          },
          "invoiceNo": {
            "type": "integer",
            "description": "Gets or sets the number of the invoice.",
            "format": "int64",
            "nullable": true
          },
          "invoiceDate": {
            "type": "string",
            "description": "Gets or sets the invoice date (Fakturadatum).",
            "format": "date-time",
            "nullable": true
          },
          "entryDate": {
            "type": "string",
            "description": "Gets or sets the entry date (Buchungsdatum).",
            "format": "date-time",
            "nullable": true
          },
          "valueDate": {
            "type": "string",
            "description": "Gets or sets the value date (Valutadatum).",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a BAF invoice."
      },
      "Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.Contact": {
        "required": [
          "roleCode"
        ],
        "type": "object",
        "properties": {
          "contactId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the contact identifier.",
            "format": "int64",
            "nullable": true
          },
          "roleCode": {
            "maximum": 45449999,
            "minimum": 45440001,
            "type": "integer",
            "description": "Gets or sets the code from code type 4544, role of the contact.",
            "format": "int64"
          },
          "fullName": {
            "maxLength": 100,
            "type": "string",
            "description": "Gets or sets the the full name (name + surname).",
            "nullable": true
          },
          "phoneNo": {
            "maxLength": 30,
            "type": "string",
            "description": "Gets or sets the phone number.",
            "nullable": true
          },
          "mobileNo": {
            "maxLength": 30,
            "type": "string",
            "description": "Gets or sets the mobile number.",
            "nullable": true
          },
          "email": {
            "maxLength": 200,
            "type": "string",
            "description": "Gets or sets the email address.",
            "nullable": true
          },
          "internal": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the contact is an internal or external contact."
          }
        },
        "additionalProperties": false,
        "description": "The DTO for contacts."
      },
      "Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.ImsCostNotice": {
        "type": "object",
        "properties": {
          "imsCostNoticeId": {
            "type": "string",
            "description": "Gets or sets the IMS cost notice identifier (PK).",
            "format": "uuid"
          },
          "active": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this cost notice is active."
          },
          "recVers": {
            "type": "integer",
            "description": "Gets or sets the record version for concurrency checking.",
            "format": "int64",
            "nullable": true
          },
          "createUser": {
            "type": "string",
            "description": "Gets or sets the user who created the entry.",
            "nullable": true
          },
          "createDate": {
            "type": "string",
            "description": "Gets or sets the date when the entry was created.",
            "format": "date-time"
          },
          "modifyUser": {
            "type": "string",
            "description": "Gets or sets the user who last modified the entry.",
            "nullable": true
          },
          "modifyDate": {
            "type": "string",
            "description": "Gets or sets the date when the entry was last modified.",
            "format": "date-time"
          },
          "imsCostNoticeState": {
            "$ref": "#/components/schemas/Infosystem.Leva.SharedTypes.Enums.QualityManagement.ImsCostNoticeStateEnum"
          },
          "imsSubjectId": {
            "type": "string",
            "description": "Gets or sets the IMS subject identifier this cost notice belongs to.",
            "format": "uuid",
            "nullable": true
          },
          "introduction": {
            "type": "string",
            "description": "Gets or sets the description of the cost notice.",
            "nullable": true
          },
          "customerCompanyMappingId": {
            "type": "integer",
            "description": "Gets or sets the id of the customer company mapping this cost notice is assigned to.",
            "format": "int64",
            "nullable": true
          },
          "recipientBusinessPartnerAddressId": {
            "type": "integer",
            "description": "Gets or sets the id of the business partner address of the recipient the cost notice is sent to.",
            "format": "int64",
            "nullable": true
          },
          "c17Language": {
            "type": "integer",
            "description": "Gets or sets the C17 language code.",
            "format": "int64",
            "nullable": true
          },
          "c26Currency": {
            "type": "integer",
            "description": "Gets or sets the C26 currency code.",
            "format": "int64",
            "nullable": true
          },
          "companyNo": {
            "type": "integer",
            "description": "Gets or sets the company number.",
            "format": "int64",
            "nullable": true
          },
          "documentGuid": {
            "type": "string",
            "description": "Gets or sets the document identifier of the generated cost notice.",
            "format": "uuid",
            "nullable": true
          },
          "documentModifyDate": {
            "type": "string",
            "description": "Gets or sets the document modify date of the generated cost notice.",
            "format": "date-time",
            "nullable": true
          },
          "documentThumbnail": {
            "type": "string",
            "description": "Gets or sets the document thumbnail of the generated cost notice.",
            "nullable": true
          },
          "costsEstimated": {
            "type": "number",
            "description": "Gets or sets the estimated costs.",
            "format": "decimal",
            "nullable": true
          },
          "emailContent": {
            "type": "string",
            "description": "Gets or sets the email content.",
            "nullable": true
          },
          "emailRecipient": {
            "type": "string",
            "description": "Gets or sets the email recipient.",
            "nullable": true
          },
          "emailSender": {
            "type": "string",
            "description": "Gets or sets the email sender.",
            "nullable": true
          },
          "emailSubject": {
            "type": "string",
            "description": "Gets or sets the email subject.",
            "nullable": true
          },
          "errorMessage": {
            "type": "string",
            "description": "Gets or sets the error message.",
            "nullable": true
          },
          "subject": {
            "type": "string",
            "description": "Gets or sets the subject.",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this cost notice is deleted."
          },
          "positions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.ImsCostNoticePosition"
            },
            "description": "Gets or sets the list of positions this IMS cost notice contains.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An IMS cost notice is sent to a customer to make it aware that an invoice will follow."
      },
      "Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.ImsCostNoticePosition": {
        "type": "object",
        "properties": {
          "imsCostNoticePositionId": {
            "type": "string",
            "description": "Gets or sets the IMS cost notices position identifier (PK).",
            "format": "uuid"
          },
          "active": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this cost notice position is active."
          },
          "recVers": {
            "type": "integer",
            "description": "Gets or sets the record version for concurrency checking.",
            "format": "int64",
            "nullable": true
          },
          "createUser": {
            "type": "string",
            "description": "Gets or sets the user who created the entry.",
            "nullable": true
          },
          "createDate": {
            "type": "string",
            "description": "Gets or sets the date when the entry was created.",
            "format": "date-time"
          },
          "modifyUser": {
            "type": "string",
            "description": "Gets or sets the user who last modified the entry.",
            "nullable": true
          },
          "modifyDate": {
            "type": "string",
            "description": "Gets or sets the date when the entry was last modified.",
            "format": "date-time"
          },
          "imsCostNoticeId": {
            "type": "string",
            "description": "Gets or sets the IMS invoice identifier this position belongs to.",
            "format": "uuid",
            "nullable": true
          },
          "positionText": {
            "type": "string",
            "description": "Gets or sets the text of the position.",
            "nullable": true
          },
          "salesItemId": {
            "type": "integer",
            "description": "Gets or sets the id of the optionally linked sales item from leva+.",
            "format": "int64",
            "nullable": true
          },
          "price": {
            "type": "number",
            "description": "Gets or sets the price for one item of this position.",
            "format": "decimal",
            "nullable": true
          },
          "c28Unit": {
            "type": "integer",
            "description": "Gets or sets the C28 unit of this IMS invoice position.",
            "format": "int64",
            "nullable": true
          },
          "quantity": {
            "type": "number",
            "description": "Gets or sets the quantity of items this position is standing for.",
            "format": "decimal",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "Gets or sets the amount that has to be paid for this position.",
            "format": "decimal",
            "nullable": true
          },
          "imsCostNoticePositionNo": {
            "type": "integer",
            "description": "Gets or sets the sequence number defining the sorting order of the positions within the cost notice.",
            "format": "int64",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this incident is deleted."
          }
        },
        "additionalProperties": false,
        "description": "IMS cost notices position.\r\nAn IMS cost notice contains multiple cost notice positions."
      },
      "Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.ImsImpact": {
        "required": [
          "imsSubjectId",
          "reportDate",
          "title"
        ],
        "type": "object",
        "properties": {
          "imsImpactId": {
            "type": "string",
            "description": "Gets or sets the impact identifier (guid).",
            "format": "uuid"
          },
          "active": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this impact is active."
          },
          "recVers": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the record version for concurrency checking.",
            "format": "int64",
            "nullable": true
          },
          "modifyUser": {
            "type": "string",
            "description": "Gets or sets the user that last modified the entry.",
            "nullable": true
          },
          "modifyDate": {
            "type": "string",
            "description": "Gets or sets the date when the entry was last modified.",
            "format": "date-time"
          },
          "imsSubjectId": {
            "type": "string",
            "description": "Gets or sets the parent subject identifier (guid) this impact belongs to.",
            "format": "uuid"
          },
          "title": {
            "maxLength": 200,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the impact title."
          },
          "description": {
            "type": "string",
            "description": "Gets or sets the description of the impact.",
            "nullable": true
          },
          "reportDate": {
            "type": "string",
            "description": "Gets or sets the report date.",
            "format": "date-time"
          },
          "reporterEmployeeId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the reporter employee ID.",
            "format": "int64",
            "nullable": true
          },
          "resourceProblemId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the resource problem identifier that is associated with this impact.",
            "format": "int64",
            "nullable": true
          },
          "resourceProblem": {
            "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.ResourceProblem"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this impact is deleted."
          },
          "resolved": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this impact is resolved (all cost are covered)."
          },
          "costsEstimated": {
            "maximum": 999999999999.99,
            "minimum": 1,
            "type": "number",
            "description": "Gets or sets the estimated costs for resolving this impact.",
            "format": "decimal",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An IMS impact is a consequence of an incident. It can be a damage, an injury or any other negative effect. Impacts are assigned to subjects."
      },
      "Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.ImsIncident": {
        "required": [
          "companyNo",
          "incidentDate",
          "title"
        ],
        "type": "object",
        "properties": {
          "imsIncidentId": {
            "type": "string",
            "description": "Gets or sets the incident identifier (guid).",
            "format": "uuid"
          },
          "recVers": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the record version for concurrency checking.",
            "format": "int64",
            "nullable": true
          },
          "modifyUser": {
            "type": "string",
            "description": "Gets or sets the user that last modified the entry.",
            "nullable": true
          },
          "modifyDate": {
            "type": "string",
            "description": "Gets or sets the date when the entry was last modified.",
            "format": "date-time"
          },
          "active": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this incident is active."
          },
          "imsIncidentNo": {
            "maxLength": 50,
            "type": "string",
            "description": "Gets or sets the unique incident number. Unlike the `ImsIncidentId`, this is a human-readable version of a unique identifier.",
            "nullable": true
          },
          "title": {
            "maxLength": 200,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the incident title."
          },
          "description": {
            "maxLength": 4000,
            "type": "string",
            "description": "Gets or sets the incident description.",
            "nullable": true
          },
          "incidentDate": {
            "type": "string",
            "description": "Gets or sets the date when the incident occured.",
            "format": "date-time"
          },
          "employeeIdClerk": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the id of the clerk managing the incident.",
            "format": "int64",
            "nullable": true
          },
          "employeeIdResponsible": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the id of the employee that is responsible for the incident.",
            "format": "int64",
            "nullable": true
          },
          "companyNo": {
            "type": "integer",
            "description": "Gets or sets the company number the incident is assigned to.",
            "format": "int64"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this incident is deleted."
          },
          "c4562ResponsibleBranch": {
            "maximum": 45629999,
            "minimum": 45620001,
            "type": "integer",
            "description": "Gets or sets the code type 4562 - responsible branch.",
            "format": "int64",
            "nullable": true
          },
          "c6957ImsPriority": {
            "maximum": 69579999,
            "minimum": 69570001,
            "type": "integer",
            "description": "Gets or sets the code type 6957 - IMS priority.",
            "format": "int64"
          },
          "c6960ImsIncidentType": {
            "maximum": 69609999,
            "minimum": 69600001,
            "type": "integer",
            "description": "Gets or sets the code type 6960 - IMS incident type.",
            "format": "int64",
            "nullable": true
          },
          "resolved": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this incident is resolved (all cost are covered)."
          },
          "subjects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.ImsSubject"
            },
            "description": "Gets or sets a list of subjects related to the incident.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An IMS incident can be, for example, an accident or mishap involving a crane or a platform. Also a so-called near-miss can be recorded as an incident.\r\nA near-miss refers to a dangerous occurrence in which something almost happened. Another example could be major events like a storm, which can have various consequences."
      },
      "Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.ImsInvoice": {
        "required": [
          "imsIncidentId"
        ],
        "type": "object",
        "properties": {
          "imsInvoiceId": {
            "type": "string",
            "description": "Gets or sets the IMS invoice identifier (PK).",
            "format": "uuid"
          },
          "active": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this impact is active."
          },
          "recVers": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the record version for concurrency checking.",
            "format": "int64",
            "nullable": true
          },
          "createUser": {
            "type": "string",
            "description": "Gets or sets the user who created the entry.",
            "nullable": true
          },
          "createDate": {
            "type": "string",
            "description": "Gets or sets the date when the entry was created.",
            "format": "date-time"
          },
          "modifyUser": {
            "type": "string",
            "description": "Gets or sets the user who last modified the entry.",
            "nullable": true
          },
          "modifyDate": {
            "type": "string",
            "description": "Gets or sets the date when the entry was last modified.",
            "format": "date-time"
          },
          "imsIncidentId": {
            "type": "string",
            "description": "Gets or sets the IMS incident identifier this invoice belongs to.",
            "format": "uuid"
          },
          "imsSubjectId": {
            "type": "string",
            "description": "Gets or sets the IMS subject identifier this invoice belongs to.",
            "format": "uuid",
            "nullable": true
          },
          "description": {
            "maxLength": 4000,
            "type": "string",
            "description": "Gets or sets the description of the invoice.",
            "nullable": true
          },
          "customerBusinessPartnerAddressId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the id of the business partner address of the customer the invoice is sent to.",
            "format": "int64",
            "nullable": true
          },
          "bafInvoiceId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the resulting BAF invoice.",
            "format": "int64",
            "nullable": true
          },
          "bafInvoice": {
            "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.BafInvoice"
          },
          "c26Currency": {
            "maximum": 269999,
            "minimum": 260001,
            "type": "integer",
            "description": "Gets or sets the C26 currency code.",
            "format": "int64",
            "nullable": true
          },
          "companyNo": {
            "maximum": 99999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the company number.",
            "format": "int64",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this invoice is deleted."
          },
          "sendToBafInvoicing": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether a BAF invoice should be created from this invoice."
          },
          "reverseBafInvoice": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the referenced BAF invoice should be canceled."
          },
          "positions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.ImsInvoicePosition"
            },
            "description": "Gets or sets the list of positions this IMS invoice contains.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An IMS invoice is a pre-step for a BAF invoice (FA-Faktura). The object contains all fields for creating a subsequent BAF invoice."
      },
      "Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.ImsInvoicePosition": {
        "type": "object",
        "properties": {
          "imsInvoicePositionId": {
            "type": "string",
            "description": "Gets or sets the IMS invoice position identifier (PK).",
            "format": "uuid"
          },
          "active": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this impact is active."
          },
          "recVers": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the record version for concurrency checking.",
            "format": "int64",
            "nullable": true
          },
          "createUser": {
            "type": "string",
            "description": "Gets or sets the user who created the entry.",
            "nullable": true
          },
          "createDate": {
            "type": "string",
            "description": "Gets or sets the date when the entry was created.",
            "format": "date-time"
          },
          "modifyUser": {
            "type": "string",
            "description": "Gets or sets the user who last modified the entry.",
            "nullable": true
          },
          "modifyDate": {
            "type": "string",
            "description": "Gets or sets the date when the entry was last modified.",
            "format": "date-time"
          },
          "imsInvoiceId": {
            "type": "string",
            "description": "Gets or sets the IMS invoice identifier this position belongs to.",
            "format": "uuid",
            "nullable": true
          },
          "positionText": {
            "maxLength": 4000,
            "type": "string",
            "description": "Gets or sets the text of the position.",
            "nullable": true
          },
          "salesItemId": {
            "type": "integer",
            "description": "Gets or sets the id of the optionally linked sales item from leva+.",
            "format": "int64",
            "nullable": true
          },
          "price": {
            "maximum": 999999999999.99,
            "minimum": 1,
            "type": "number",
            "description": "Gets or sets the price for one item of this position.",
            "format": "decimal",
            "nullable": true
          },
          "c28Unit": {
            "maximum": 289999,
            "minimum": 280001,
            "type": "integer",
            "description": "Gets or sets the C28 unit of this IMS invoice position.",
            "format": "int64",
            "nullable": true
          },
          "quantity": {
            "maximum": 100000000000000,
            "minimum": 1,
            "type": "number",
            "description": "Gets or sets the quantity of items this position is standing for.",
            "format": "decimal",
            "nullable": true
          },
          "amount": {
            "minimum": 1,
            "type": "number",
            "description": "Gets or sets the amount that has to be paid for this position.",
            "format": "decimal",
            "nullable": true
          },
          "imsInvoicePositionNo": {
            "type": "integer",
            "description": "Gets or sets the sequence number defining the sorting order of the positions within the invoice.",
            "format": "int64",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this incident is deleted."
          }
        },
        "additionalProperties": false,
        "description": "IMS invoice position.\r\nAn IMS invoice contains multiple invoice positions."
      },
      "Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.ImsJobLocation": {
        "type": "object",
        "properties": {
          "jobLocationId": {
            "type": "integer",
            "description": "Gets or sets unique identifier of job location.",
            "format": "int64",
            "nullable": true,
            "example": 8392
          },
          "description": {
            "type": "string",
            "description": "Gets or sets location description.",
            "nullable": true,
            "example": "Construction Site, Gate 4"
          },
          "street": {
            "type": "string",
            "description": "Gets or sets street name without house number.",
            "nullable": true
          },
          "houseNo": {
            "type": "string",
            "description": "Gets or sets house number.",
            "nullable": true
          },
          "zip": {
            "type": "string",
            "description": "Gets or sets zip code of the address in country-specific format. Mandatory together with the country code and the city. For example, \"EC1A 1AA\" for London, England or \"9500\" for Wil, Switzerland.",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "Gets or sets city.",
            "nullable": true
          },
          "countryCode": {
            "type": "integer",
            "description": "Gets or sets the C3 country code.",
            "format": "int64",
            "nullable": true
          },
          "latitude": {
            "type": "number",
            "description": "Gets or sets location latitude.",
            "format": "double",
            "nullable": true
          },
          "longitude": {
            "type": "number",
            "description": "Gets or sets location longitude.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Location information for leva+ (address, additional information such as restrictions, ect.)."
      },
      "Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.ImsOverviewItem": {
        "required": [
          "imsImpactTitle",
          "imsIncidentTitle",
          "imsSubjectTitle"
        ],
        "type": "object",
        "properties": {
          "modifyUser": {
            "type": "string",
            "description": "Gets or sets the user that last modified the incident/subject/impact.",
            "nullable": true
          },
          "modifyDate": {
            "type": "string",
            "description": "Gets or sets the date when the incident/subject/impact was last modified.",
            "format": "date-time"
          },
          "imsIncidentId": {
            "type": "string",
            "description": "Gets or sets the incident identifier (guid).",
            "format": "uuid"
          },
          "imsIncidentNo": {
            "maxLength": 50,
            "type": "string",
            "description": "Gets or sets the unique incident number. Unlike the `ImsIncidentId`, this is a human-readable version of a unique identifier.",
            "nullable": true
          },
          "imsIncidentTitle": {
            "maxLength": 200,
            "type": "string",
            "description": "Gets or sets the incident title.",
            "nullable": true
          },
          "imsIncidentDate": {
            "type": "string",
            "description": "Gets or sets the date when the incident occured.",
            "format": "date-time"
          },
          "imsIncidentEmployeeClerk": {
            "type": "string",
            "description": "Gets or sets the description of the clerk managing the incident.",
            "nullable": true
          },
          "imsIncidentEmployeeResponsible": {
            "type": "string",
            "description": "Gets or sets the description of the employee that is responsible for the incident.",
            "nullable": true
          },
          "imsIncidentC4562ResponsibleBranch": {
            "maximum": 45629999,
            "minimum": 45620001,
            "type": "integer",
            "description": "Gets or sets the code type 4562 - responsible branch for the incident.",
            "format": "int64",
            "nullable": true
          },
          "imsIncidentC6957ImsPriority": {
            "maximum": 69579999,
            "minimum": 69570001,
            "type": "integer",
            "description": "Gets or sets the code type 6957 - IMS priority for the incident.",
            "format": "int64"
          },
          "imsSubjectId": {
            "type": "string",
            "description": "Gets or sets the subject identifier (guid).",
            "format": "uuid",
            "nullable": true
          },
          "imsSubjectTitle": {
            "maxLength": 200,
            "type": "string",
            "description": "Gets or sets the subject title.",
            "nullable": true
          },
          "imsSubjectDamagedParty": {
            "type": "string",
            "description": "Gets or sets the party that was damaged by the referenced incident. The incident can damage the own company or another party.",
            "nullable": true
          },
          "imsSubjectInvolvedEmployee": {
            "type": "string",
            "description": "Gets or sets the employee description of the internal employee that is involved in the incident. E.g. the driver of the machine that caused the incident.",
            "nullable": true
          },
          "imsSubjectInvolvedAccessory": {
            "type": "string",
            "description": "Gets or sets the involved accessory description.",
            "nullable": true
          },
          "imsSubjectInvolvedMachine": {
            "type": "string",
            "description": "Gets or sets the involved machine description.",
            "nullable": true
          },
          "imsSubjectC6958ImsCauserCategory": {
            "maximum": 69589999,
            "minimum": 69580001,
            "type": "integer",
            "description": "Gets or sets the code type 6958 - IMS causer category.",
            "format": "int64",
            "nullable": true
          },
          "imsSubjectCostsEstimated": {
            "maximum": 999999999999.99,
            "minimum": 1,
            "type": "number",
            "description": "Gets or sets the estimated costs for resolving this subject.",
            "format": "decimal",
            "nullable": true
          },
          "imsSubjectC4562AssignedBranch": {
            "maximum": 45629999,
            "minimum": 45620001,
            "type": "integer",
            "description": "Gets or sets the branch the subject is assigned to.",
            "format": "int64",
            "nullable": true
          },
          "imsSubjectC3344InsuranceType": {
            "maximum": 33449999,
            "minimum": 33440001,
            "type": "integer",
            "description": "Gets or sets the C3344 insurance type.",
            "format": "int64",
            "nullable": true
          },
          "imsSubjectC6959ImsStatus": {
            "maximum": 69599999,
            "minimum": 69590001,
            "type": "integer",
            "description": "Gets or sets the code type 6959 - IMS status.",
            "format": "int64",
            "nullable": true
          },
          "imsSubjectCauserParty": {
            "maxLength": 200,
            "type": "string",
            "description": "Gets or sets the party that caused the referenced incident. The incident can be caused by the own company or another party.",
            "nullable": true
          },
          "imsSubjectInvolvedPersonOtherParty": {
            "maxLength": 200,
            "type": "string",
            "description": "Gets or sets the involved person of the other party. This person can be the causer of the incident or can be impacted by the incident.",
            "nullable": true
          },
          "imsSubjectInsuranceCaseNo": {
            "maxLength": 100,
            "type": "string",
            "description": "Gets or sets the number of the insurance case of the internal insurance.",
            "nullable": true
          },
          "imsSubjectInsuranceOtherParty": {
            "maxLength": 200,
            "type": "string",
            "description": "Gets or sets the insurance of the other involved party. The other party can have caused the incident or can be damaged by the incident.",
            "nullable": true
          },
          "imsSubjectInsuranceCaseNoOtherParty": {
            "maxLength": 100,
            "type": "string",
            "description": "Gets or sets the number of the insurance case of the insurance of the other party. The other party can have caused the incident or can be damaged by the incident.",
            "nullable": true
          },
          "imsImpactId": {
            "type": "string",
            "description": "Gets or sets the impact identifier (guid).",
            "format": "uuid",
            "nullable": true
          },
          "imsImpactTitle": {
            "maxLength": 200,
            "type": "string",
            "description": "Gets or sets the impact title.",
            "nullable": true
          },
          "imsImpactResourceProblemId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the resource problem identifier that is associated with this impact.",
            "format": "int64",
            "nullable": true
          },
          "imsImpactCostsEstimated": {
            "maximum": 999999999999.99,
            "minimum": 1,
            "type": "number",
            "description": "Gets or sets the estimated costs for resolving this impact.",
            "format": "decimal",
            "nullable": true
          },
          "imsImpactReportDate": {
            "type": "string",
            "description": "Gets or sets the impact report date.",
            "format": "date-time",
            "nullable": true
          },
          "imsImpactReporterEmployee": {
            "type": "string",
            "description": "Gets or sets the impact reporter employee description.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "IMS overview entry. This impact, subject or incident related DTO contains additional information about its parent/child elements."
      },
      "Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.ImsSubject": {
        "required": [
          "imsIncidentId",
          "title"
        ],
        "type": "object",
        "properties": {
          "imsSubjectId": {
            "type": "string",
            "description": "Gets or sets the subject identifier (guid).",
            "format": "uuid"
          },
          "active": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this subject is active."
          },
          "recVers": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the record version for concurrency checking.",
            "format": "int64",
            "nullable": true
          },
          "modifyUser": {
            "type": "string",
            "description": "Gets or sets the user that last modified the entry.",
            "nullable": true
          },
          "modifyDate": {
            "type": "string",
            "description": "Gets or sets the date when the entry was last modified.",
            "format": "date-time"
          },
          "imsIncidentId": {
            "type": "string",
            "description": "Gets or sets the parent incident identifier (guid) this subject belongs to.",
            "format": "uuid"
          },
          "title": {
            "maxLength": 200,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the subject title."
          },
          "description": {
            "maxLength": 4000,
            "type": "string",
            "description": "Gets or sets the description of the subject.",
            "nullable": true
          },
          "causerParty": {
            "maxLength": 200,
            "type": "string",
            "description": "Gets or sets the party that caused the referenced incident. The incident can be caused by the own company or another party.",
            "nullable": true
          },
          "causerPartyBpAddrId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets address of the party that caused the referenced incident. The incident can be caused by the own company or another party.",
            "format": "int64",
            "nullable": true
          },
          "causerRentalOrderId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the rental order related to the referenced incident.",
            "format": "int64",
            "nullable": true
          },
          "damagedParty": {
            "maxLength": 200,
            "type": "string",
            "description": "Gets or sets the party that was damaged by the referenced incident. The incident can damage the own company or another party.",
            "nullable": true
          },
          "customerCompanyId": {
            "maximum": 99999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the company id of the customer.",
            "format": "int64",
            "nullable": true
          },
          "invoiceAddressBusinessPartnerAddressId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the invoice address id for the costs related to fix the subject.",
            "format": "int64",
            "nullable": true
          },
          "invoiceShippingAddressBusinessPartnerAddressId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the invoice shipping address id for the costs related to fix the subject.",
            "format": "int64",
            "nullable": true
          },
          "c3344InsuranceType": {
            "maximum": 33449999,
            "minimum": 33440001,
            "type": "integer",
            "description": "Gets or sets the the C3344 insurance type.",
            "format": "int64",
            "nullable": true
          },
          "insuranceCaseNo": {
            "maxLength": 100,
            "type": "string",
            "description": "Gets or sets the number of the insurance case of the internal insurance.",
            "nullable": true
          },
          "insuranceOtherParty": {
            "maxLength": 200,
            "type": "string",
            "description": "Gets or sets the insurance of the other involved party. The other party can have caused the incident or can be damaged by the incident.",
            "nullable": true
          },
          "insuranceCaseNoOtherParty": {
            "maxLength": 100,
            "type": "string",
            "description": "Gets or sets the number of the insurance case of the insurance of the other party. The other party can have caused the incident or can be damaged by the incident.",
            "nullable": true
          },
          "involvedEmployeeId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the employee id of the internal employee that is involved in the incident. E.g. the driver of the machine that caused the incident.",
            "format": "int64",
            "nullable": true
          },
          "involvedPersonOtherParty": {
            "maxLength": 200,
            "type": "string",
            "description": "Gets or sets the involved person of the other party. This person can be the causer of the incident or can be impacted by the incident.",
            "nullable": true
          },
          "involvedAccessoryId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the involved accessory id.",
            "format": "int64",
            "nullable": true
          },
          "involvedMachineId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the involved machine id.",
            "format": "int64",
            "nullable": true
          },
          "c4562AssignedBranch": {
            "maximum": 45629999,
            "minimum": 45620001,
            "type": "integer",
            "description": "Gets or sets the branch the subject is assigned to.",
            "format": "int64",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this subject is deleted."
          },
          "c6958ImsCauserCategory": {
            "maximum": 69589999,
            "minimum": 69580001,
            "type": "integer",
            "description": "Gets or sets the code type 6958 - IMS causer category.",
            "format": "int64",
            "nullable": true
          },
          "c6959ImsStatus": {
            "maximum": 69599999,
            "minimum": 69590001,
            "type": "integer",
            "description": "Gets or sets the code type 6959 - IMS status.",
            "format": "int64"
          },
          "resolved": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this subject is resolved (all cost are covered)."
          },
          "costsEstimated": {
            "maximum": 999999999999.99,
            "minimum": 1,
            "type": "number",
            "description": "Gets or sets the estimated costs for resolving this subject.",
            "format": "decimal",
            "nullable": true
          },
          "amountPaidByInsurance": {
            "maximum": 999999999999.99,
            "minimum": 1,
            "type": "number",
            "description": "Gets or sets the amount paid by our insurance to a 3rd-party.",
            "format": "decimal",
            "nullable": true
          },
          "amountReceived": {
            "maximum": 999999999999.99,
            "minimum": 1,
            "type": "number",
            "description": "Gets or sets the amount received from a 3rd-party.",
            "format": "decimal",
            "nullable": true
          },
          "orderHeaderId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the order header identifier linked to this subject.",
            "format": "int64",
            "nullable": true
          },
          "impacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.ImsImpact"
            },
            "description": "Gets or sets a list of impacts related to the subject.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A subject is a person, a machine or any other object that is involved in an IMS incident."
      },
      "Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.JournalEntry": {
        "required": [
          "imsIncidentId",
          "journalEntryDate",
          "subject"
        ],
        "type": "object",
        "properties": {
          "journalEntryId": {
            "type": "string",
            "description": "Gets or sets the journal entry identifier.",
            "format": "uuid",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this journal entry is active."
          },
          "recVers": {
            "type": "integer",
            "description": "Gets or sets the record version for concurrency checking.",
            "format": "int64"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this journal entry is deleted."
          },
          "modifyUser": {
            "type": "string",
            "description": "Gets or sets the user who last modified the entry.",
            "nullable": true
          },
          "modifyDate": {
            "type": "string",
            "description": "Gets or sets the date when the entry was last modified.",
            "format": "date-time",
            "nullable": true
          },
          "imsIncidentId": {
            "type": "string",
            "description": "Gets or sets the identifier of the referenced IMS incident.",
            "format": "uuid"
          },
          "journalEntryDate": {
            "type": "string",
            "description": "Gets or sets the date and time of the journal entry.",
            "format": "date-time"
          },
          "subject": {
            "type": "string",
            "description": "Gets or sets the subject.",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "description": "Gets or sets the report date.",
            "nullable": true
          },
          "journalEntryTypeCode": {
            "type": "integer",
            "description": "Gets or sets the c6962 code.",
            "format": "int64",
            "nullable": true
          },
          "documentContainer": {
            "$ref": "#/components/schemas/Infosystem.Baf.SharedTypes.Dtos.Generic.DocumentContainer"
          }
        },
        "additionalProperties": false,
        "description": "Journal entry."
      },
      "Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.Order": {
        "type": "object",
        "properties": {
          "id": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "string",
            "description": "Gets or sets identifier of the order.",
            "nullable": true
          },
          "companyId": {
            "maximum": 99999999,
            "minimum": 1,
            "type": "string",
            "description": "Gets or sets the id of the company the order is assigned to.",
            "nullable": true
          },
          "orderNo": {
            "maxLength": 20,
            "type": "string",
            "description": "Gets or sets the order number (alphanumeric, may include a string prefix configured via company settings).",
            "nullable": true
          },
          "statusCode": {
            "maximum": 45529999,
            "minimum": 45520001,
            "type": "integer",
            "description": "Gets or sets the status code 4552 of the order.",
            "format": "int64",
            "nullable": true
          },
          "orderTitle": {
            "maxLength": 100,
            "type": "string",
            "description": "Gets or sets the title of the order.",
            "nullable": true
          },
          "agencyId": {
            "maximum": 45629999,
            "minimum": 45620001,
            "type": "string",
            "description": "Gets or sets the id of the agency the order is assigned to.",
            "nullable": true
          },
          "locationId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "string",
            "description": "Gets or sets the id of the location the order is assigned to.",
            "nullable": true
          },
          "businessPartnerAddressId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "string",
            "description": "Gets or sets the address of the customer of the order.",
            "nullable": true
          },
          "customerId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets technical identification number of the customer.",
            "format": "int64",
            "nullable": true
          },
          "customerShortAddress": {
            "type": "string",
            "description": "Gets or sets the short address of the customer.",
            "nullable": true
          },
          "contactList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.Contact"
            },
            "description": "Gets or sets a list of contacts for the order.",
            "nullable": true
          },
          "jobLocationList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.ImsJobLocation"
            },
            "description": "Gets or sets the list of job locations.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Data object for an order."
      },
      "Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.ResourceProblem": {
        "type": "object",
        "properties": {
          "id": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the resource problem identifier.",
            "format": "int64",
            "nullable": true
          },
          "companyNo": {
            "type": "integer",
            "description": "Gets or sets the company number to retrieve documents for.",
            "format": "int64",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the resource problem is active."
          },
          "customersFault": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the resource problem is caused by the customer."
          },
          "visibleForCustomer": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the resource problem is visible for the customer."
          },
          "solved": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the resource problem is solved."
          },
          "problemType": {
            "maximum": 1,
            "minimum": 0,
            "type": "integer",
            "description": "Gets or sets the resource problem type (0 = damage, 1 = defect).",
            "format": "int64"
          },
          "c3342ResourceCondition": {
            "maximum": 33429999,
            "minimum": 33420001,
            "type": "integer",
            "description": "Gets or sets the c3342 code for the resource condition.",
            "format": "int64"
          },
          "priority": {
            "maximum": 2,
            "minimum": 0,
            "type": "integer",
            "description": "Gets or sets the resource problem priority (0 = low, 1 = medium, 2 = high).",
            "format": "int64"
          },
          "incidentMgmtRequired": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether incident management is required."
          },
          "incidentMgmtContext": {
            "maxLength": 50,
            "type": "string",
            "description": "Gets or sets the incident management context.",
            "nullable": true
          },
          "incidentMgmtContextId": {
            "maxLength": 50,
            "type": "string",
            "description": "Gets or sets the incident management context identifier.",
            "nullable": true
          },
          "managedDate": {
            "type": "string",
            "description": "Gets or sets the date when the resource problem was reported in IMS.",
            "format": "date-time"
          },
          "managedUser": {
            "maxLength": 30,
            "type": "string",
            "description": "Gets or sets the user that reported the resource problem in IMS.",
            "nullable": true
          },
          "description": {
            "maxLength": 200,
            "type": "string",
            "description": "Gets or sets the resource problem description.",
            "nullable": true
          },
          "comments": {
            "maxLength": 500,
            "type": "string",
            "description": "Gets or sets the resource problem comments.",
            "nullable": true
          },
          "origin": {
            "maxLength": 50,
            "type": "string",
            "description": "Gets or sets the origin of the resource problem, e.g. 'B_BA.MASCHINE'.",
            "nullable": true
          },
          "originId": {
            "maxLength": 50,
            "type": "string",
            "description": "Gets or sets the origin id of the resource problem.",
            "nullable": true
          },
          "order": {
            "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Ims.Order"
          },
          "reportedDate": {
            "type": "string",
            "description": "Gets or sets the date when the resource problem was reported.",
            "format": "date-time"
          },
          "reportedUser": {
            "maxLength": 30,
            "type": "string",
            "description": "Gets or sets the user that reported the resource problem.",
            "nullable": true
          },
          "reportingContext": {
            "maxLength": 50,
            "type": "string",
            "description": "Gets or sets the reporting context of the resource problem.",
            "nullable": true
          },
          "reportingContextId": {
            "maxLength": 50,
            "type": "string",
            "description": "Gets or sets the reporting context id of the resource problem.",
            "nullable": true
          },
          "reportingContextText": {
            "type": "string",
            "description": "Gets or sets the reporting context text of the resource problem.",
            "nullable": true
          },
          "reportingChannel": {
            "maxLength": 30,
            "type": "string",
            "description": "Gets or sets the reporting channel of the resource problem.",
            "nullable": true
          },
          "documentContainer": {
            "$ref": "#/components/schemas/Infosystem.Baf.SharedTypes.Dtos.Generic.DocumentContainer"
          }
        },
        "additionalProperties": false,
        "description": "Resource problem entry."
      },
      "Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Machine.Machine": {
        "required": [
          "active",
          "description"
        ],
        "type": "object",
        "properties": {
          "machineId": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the internal technical key for the machine.",
            "format": "int64",
            "nullable": true
          },
          "machineNo": {
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets the identification number for a single machine.",
            "format": "int64",
            "nullable": true
          },
          "machineGuid": {
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the unique identifier for a machine. Used for communication with third party systems.",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether or not the machine may be used in leva+."
          },
          "description": {
            "maxLength": 200,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the description (e.g. name, type, number) of the machine.",
            "example": "Genie RS-1932, Blue Version"
          },
          "branchCode": {
            "type": "integer",
            "description": "Gets or sets c4562 identification code of the branch to which the machine belongs.",
            "format": "int64",
            "nullable": true,
            "example": 45620010
          }
        },
        "additionalProperties": false,
        "description": "Machine entity."
      },
      "Infosystem.Leva.WebApi.Internal.Controllers.Dtos.SalesItem.SalesItem": {
        "required": [
          "active",
          "bafArticleId",
          "bafArticleNo",
          "c28Unit",
          "c28Units",
          "companyNo",
          "description",
          "shortDescription"
        ],
        "type": "object",
        "properties": {
          "salesItemId": {
            "maximum": 9999999999,
            "minimum": 0,
            "type": "integer",
            "description": "Gets or sets the identifier of the sales item.",
            "format": "int64",
            "nullable": true
          },
          "bafArticleId": {
            "maximum": 9999999999,
            "minimum": 0,
            "type": "integer",
            "description": "Gets or sets the BAF identifier of the corresponding BAF article.",
            "format": "int64"
          },
          "bafArticleNo": {
            "maxLength": 20,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the BAF article number of the corresponding BAF article."
          },
          "active": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the sales item is active."
          },
          "description": {
            "maxLength": 300,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the description of the sales item."
          },
          "shortDescription": {
            "maxLength": 80,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the short description of the sales item."
          },
          "c28Unit": {
            "maximum": 289999,
            "minimum": 280001,
            "type": "integer",
            "description": "Gets or sets the c28 unit code.",
            "format": "int64"
          },
          "companyNo": {
            "maximum": 999999,
            "minimum": 0,
            "type": "integer",
            "description": "Gets or sets the company number.",
            "format": "int64"
          },
          "c28Units": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Gets or sets a list of c28 unit codes valid for this sales item."
          }
        },
        "additionalProperties": false,
        "description": "The sales item dto."
      },
      "Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Tour.PersistTourPointRequest": {
        "required": [
          "flexTimeSpec",
          "identity",
          "sequenceNo",
          "time",
          "type"
        ],
        "type": "object",
        "properties": {
          "identity": {
            "$ref": "#/components/schemas/Infosystem.Baf.DotNet.Security.Identity"
          },
          "contextPath": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Gets or sets identifier of the tour point.",
            "format": "uuid",
            "nullable": true
          },
          "tourId": {
            "type": "string",
            "description": "Gets or sets identifier of the tour.",
            "format": "uuid",
            "nullable": true
          },
          "recVers": {
            "type": "integer",
            "description": "Gets or sets record version for concurrency checking.",
            "format": "int64",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether specifies whether the tour point is deleted."
          },
          "sequenceNo": {
            "type": "integer",
            "description": "Gets or sets position of the tour point in the list of tour points of this tour.",
            "format": "int32"
          },
          "time": {
            "type": "string",
            "description": "Gets or sets the time of this tour point.",
            "format": "date-time"
          },
          "flexTimeSpec": {
            "maxLength": 20,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets key of the flexible time specification."
          },
          "type": {
            "maxLength": 10,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets defines if this a loading or an unloading tour point."
          }
        },
        "additionalProperties": false,
        "description": "Data object for persisting a tour point."
      },
      "Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Tour.PersistTourRequest": {
        "required": [
          "agencyId",
          "companyId",
          "description",
          "endDate",
          "identity",
          "locationId",
          "startDate",
          "tourPoints"
        ],
        "type": "object",
        "properties": {
          "identity": {
            "$ref": "#/components/schemas/Infosystem.Baf.DotNet.Security.Identity"
          },
          "contextPath": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Gets or sets identifier of the tour.",
            "format": "uuid",
            "nullable": true
          },
          "recVers": {
            "type": "integer",
            "description": "Gets or sets record version for concurrency checking.",
            "format": "int64",
            "nullable": true
          },
          "companyId": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the id of the company the tour is assigned to."
          },
          "agencyId": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the id of the agency the tour is assigned to."
          },
          "locationId": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the id of the location the tour is assigned to."
          },
          "startDate": {
            "type": "string",
            "description": "Gets or sets the date when the tour starts.",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "description": "Gets or sets the date when the tour ends.",
            "format": "date-time"
          },
          "description": {
            "maxLength": 300,
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the description of the tour."
          },
          "stateId": {
            "maxLength": 20,
            "type": "string",
            "description": "Gets or sets the id of the state of the tour.",
            "nullable": true
          },
          "vehicleSchedulingGroupId": {
            "maxLength": 50,
            "type": "string",
            "description": "Gets or sets the scheduling group of the vehicle that should handle this tour.",
            "nullable": true
          },
          "vehicleAssetResourceId": {
            "maxLength": 50,
            "type": "string",
            "description": "Gets or sets the vehicle asset resource that should handle this tour.",
            "nullable": true
          },
          "trailerSchedulingGroupId": {
            "maxLength": 50,
            "type": "string",
            "description": "Gets or sets the scheduling group of the trailer that should handle this tour.",
            "nullable": true
          },
          "trailerAssetResourceId": {
            "maxLength": 50,
            "type": "string",
            "description": "Gets or sets the trailer asset resource that should handle this tour.",
            "nullable": true
          },
          "driverEmployeeId": {
            "maxLength": 50,
            "type": "string",
            "description": "Gets or sets the driver that should handle this tour.",
            "nullable": true
          },
          "tourPoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Tour.PersistTourPointRequest"
            },
            "description": "Gets or sets a list of tour points."
          },
          "tourTransportDemands": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Tour.PersistTourTransportDemandRequest"
            },
            "description": "Gets or sets list of newly added tour transport demands.\r\nThe transport demands will be added to existing tour points or new tour points will be created based on the loading and unloading location and time.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Data object for persisting a tour."
      },
      "Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Tour.PersistTourTransportDemandRequest": {
        "required": [
          "identity",
          "sourceTransportDemandId"
        ],
        "type": "object",
        "properties": {
          "identity": {
            "$ref": "#/components/schemas/Infosystem.Baf.DotNet.Security.Identity"
          },
          "contextPath": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Gets or sets identifier of the tour transport demand.",
            "format": "uuid",
            "nullable": true
          },
          "recVers": {
            "type": "integer",
            "description": "Gets or sets record version for concurrency checking.",
            "format": "int64",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether specifies whether the tour transport demand is deleted."
          },
          "loadingTourPointId": {
            "type": "string",
            "description": "Gets or sets the identifier of the loading tour point of this tour transport demand.",
            "format": "uuid",
            "nullable": true
          },
          "unloadingTourPointId": {
            "type": "string",
            "description": "Gets or sets the identifier of the unloading tour point of this tour transport demand.",
            "format": "uuid",
            "nullable": true
          },
          "sourceTransportDemandId": {
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets id of the original transport demand."
          },
          "comment": {
            "type": "string",
            "description": "Gets or sets optional comments for this tour transport demand.",
            "nullable": true
          },
          "fulfillmentTransportDemandId": {
            "type": "string",
            "description": "Gets or sets id of the transport demand that fulfills this tour transport demand.",
            "nullable": true
          },
          "salesOrderPositionId": {
            "type": "string",
            "description": "Gets or sets id of the order line that fulfills this tour transport demand\r\n(i.e. the order line that is linked to the transport resource demand that fulfills the\r\ntransport demand with the id Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Tour.PersistTourTransportDemandRequest.FulfillmentTransportDemandId).",
            "nullable": true
          },
          "loadingSequenceNo": {
            "type": "integer",
            "description": "Gets or sets the loading sequence number of this tour transport demand.\r\nTour transport demands are sorted by this sequence number within a loading Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Tour.TourPoint.",
            "format": "int32"
          },
          "unloadingSequenceNo": {
            "type": "integer",
            "description": "Gets or sets the unloading sequence number of this tour transport demand.\r\nTour transport demands are sorted by this sequence number within a unloading Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Tour.TourPoint.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Data object for persisting a tour transport demand."
      },
      "Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Tour.Tour": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Gets or sets identifier of the tour.",
            "format": "uuid"
          },
          "recVers": {
            "type": "integer",
            "description": "Gets or sets record version for concurrency checking.",
            "format": "int64"
          },
          "companyId": {
            "type": "string",
            "description": "Gets or sets the id of the company the tour is assigned to.",
            "nullable": true
          },
          "agencyId": {
            "type": "string",
            "description": "Gets or sets the id of the agency the tour is assigned to.",
            "nullable": true
          },
          "locationId": {
            "type": "string",
            "description": "Gets or sets the id of the location the tour is assigned to.",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "description": "Gets or sets the date when the tour starts.",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "description": "Gets or sets the date when the tour ends.",
            "format": "date-time"
          },
          "description": {
            "type": "string",
            "description": "Gets or sets the description of the tour.",
            "nullable": true
          },
          "stateId": {
            "type": "string",
            "description": "Gets or sets the id of the state of the tour.",
            "nullable": true
          },
          "stateDescription": {
            "type": "string",
            "description": "Gets or sets the description of the state of the tour.",
            "nullable": true
          },
          "vehicleSchedulingGroupId": {
            "type": "string",
            "description": "Gets or sets the scheduling group of the vehicle that should handle this tour.",
            "nullable": true
          },
          "vehicleAssetResourceId": {
            "type": "string",
            "description": "Gets or sets the vehicle asset resource that should handle this tour.",
            "nullable": true
          },
          "trailerSchedulingGroupId": {
            "type": "string",
            "description": "Gets or sets the scheduling group of the trailer that should handle this tour.",
            "nullable": true
          },
          "trailerAssetResourceId": {
            "type": "string",
            "description": "Gets or sets the trailer asset resource that should handle this tour.",
            "nullable": true
          },
          "driverEmployeeId": {
            "type": "string",
            "description": "Gets or sets the driver that should handle this tour.",
            "nullable": true
          },
          "salesOrderId": {
            "type": "string",
            "description": "Gets or sets id of the order that fulfills the tour. An order is created when the tour is confirmed.",
            "nullable": true
          },
          "salesOrderNo": {
            "type": "string",
            "description": "Gets or sets number of the order that fulfills the tour. An order is created when the tour is confirmed.",
            "nullable": true
          },
          "fulfillmentJobId": {
            "type": "string",
            "description": "Gets or sets id of the job that fulfills the tour. A job is created along with the order when the tour is confirmed.",
            "nullable": true
          },
          "tourPoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Tour.TourPoint"
            },
            "description": "Gets or sets a list of tour points.",
            "nullable": true
          },
          "tourTransportDemands": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Tour.TourTransportDemand"
            },
            "description": "Gets or sets a list of tour transport demands.",
            "nullable": true
          },
          "tourActions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Tour.TourAction"
            },
            "description": "Gets or sets a list of tour actions that can be executed on the tour.",
            "nullable": true
          },
          "tourOptions": {
            "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.TourOptions.TourOptions"
          }
        },
        "additionalProperties": false,
        "description": "Data object for a tour."
      },
      "Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Tour.TourAction": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Gets or sets description of the action.",
            "nullable": true
          },
          "newTourStateId": {
            "type": "string",
            "description": "Gets or sets the id of the new tour state if this action is executed.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Data object for a tour action."
      },
      "Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Tour.TourPoint": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Gets or sets identifier of the tour point.",
            "format": "uuid"
          },
          "tourId": {
            "type": "string",
            "description": "Gets or sets identifier of the tour this tour point is assigned to.",
            "format": "uuid"
          },
          "recVers": {
            "type": "integer",
            "description": "Gets or sets record version for concurrency checking.",
            "format": "int64"
          },
          "sequenceNo": {
            "type": "integer",
            "description": "Gets or sets position of the tour point in the list of tour points of this tour.",
            "format": "int32"
          },
          "time": {
            "type": "string",
            "description": "Gets or sets the time of this tour point.",
            "format": "date-time"
          },
          "flexTimeSpec": {
            "type": "string",
            "description": "Gets or sets key of the flexible time specification.",
            "nullable": true
          },
          "flexTimeSpecDescription": {
            "type": "string",
            "description": "Gets or sets description of the flexible time specification.",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "Gets or sets defines if this a loading or an unloading tour point.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Data object for a tour point."
      },
      "Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Tour.TourTransportDemand": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Gets or sets identifier of the tour transport demand.",
            "format": "uuid",
            "nullable": true
          },
          "recVers": {
            "type": "integer",
            "description": "Gets or sets record version for concurrency checking.",
            "format": "int64"
          },
          "sourceTransportDemandId": {
            "type": "string",
            "description": "Gets or sets id of the original transport demand.",
            "nullable": true
          },
          "loadingTourPointId": {
            "type": "string",
            "description": "Gets or sets the identifier of the loading tour point of this tour transport demand.",
            "format": "uuid",
            "nullable": true
          },
          "unloadingTourPointId": {
            "type": "string",
            "description": "Gets or sets the identifier of the unloading tour point of this tour transport demand.",
            "format": "uuid",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "description": "Gets or sets optional comments for this tour transport demand.",
            "nullable": true
          },
          "fulfillmentTransportDemandId": {
            "type": "string",
            "description": "Gets or sets id of the transport demand that fulfills this tour transport demand.",
            "nullable": true
          },
          "salesOrderPositionId": {
            "type": "string",
            "description": "Gets or sets id of the order line that fulfills this tour transport demand\r\n(i.e. the order line that is linked to the transport resource demand that fulfills the\r\ntransport demand with the id Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Tour.TourTransportDemand.FulfillmentTransportDemandId).",
            "nullable": true
          },
          "loadingSequenceNo": {
            "type": "integer",
            "description": "Gets or sets the loading sequence number of this tour transport demand.\r\nTour transport demands are sorted by this sequence number within a loading Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Tour.TourPoint.",
            "format": "int32"
          },
          "unloadingSequenceNo": {
            "type": "integer",
            "description": "Gets or sets the unloading sequence number of this tour transport demand.\r\nTour transport demands are sorted by this sequence number within a unloading Infosystem.Leva.WebApi.Internal.Controllers.Dtos.Tour.TourPoint.",
            "format": "int32"
          },
          "sourceTransportDemand": {
            "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.TransportDemand.TransportDemand"
          }
        },
        "additionalProperties": false,
        "description": "Data object for a tour transport demand."
      },
      "Infosystem.Leva.WebApi.Internal.Controllers.Dtos.TourOptions.AssetResource": {
        "type": "object",
        "properties": {
          "assetResourceId": {
            "type": "string",
            "description": "Gets or sets the asset resource ID.",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the asset resource is active."
          },
          "description": {
            "type": "string",
            "description": "Gets or sets the description of the asset resource.",
            "nullable": true
          },
          "assetResourceNo": {
            "type": "string",
            "description": "Gets or sets the optional number of an asset resource.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Data object for a leva asset resource."
      },
      "Infosystem.Leva.WebApi.Internal.Controllers.Dtos.TourOptions.SchedulingGroup": {
        "type": "object",
        "properties": {
          "schedulingGroupId": {
            "type": "string",
            "description": "Gets or sets the id resp. code of the scheduling group.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Gets or sets the description resp. name of the scheduling group.",
            "nullable": true
          },
          "shortDescription": {
            "type": "string",
            "description": "Gets or sets the short description of the scheduling group.",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the scheduling group is active."
          }
        },
        "additionalProperties": false,
        "description": "Data object for a leva+ scheduling group."
      },
      "Infosystem.Leva.WebApi.Internal.Controllers.Dtos.TourOptions.SuggestedSelectionValues": {
        "type": "object",
        "properties": {
          "vehicleSchedulingGroupId": {
            "type": "string",
            "description": "Gets or sets id of the vehicle scheduling group.",
            "nullable": true
          },
          "vehicleAssetResourceId": {
            "type": "string",
            "description": "Gets or sets id of the vehicle (machine id).",
            "nullable": true
          },
          "trailerSchedulingGroupId": {
            "type": "string",
            "description": "Gets or sets id of the trailer scheduling group.",
            "nullable": true
          },
          "trailerAssetResourceId": {
            "type": "string",
            "description": "Gets or sets id of the trailer (machine id).",
            "nullable": true
          },
          "driverEmployeeId": {
            "type": "string",
            "description": "Gets or sets id of the driver (leva personnel).",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Values suggested for selection as part of the tour options."
      },
      "Infosystem.Leva.WebApi.Internal.Controllers.Dtos.TourOptions.TourOptions": {
        "type": "object",
        "properties": {
          "companyId": {
            "type": "string",
            "description": "Gets or sets id of the company the options are valid for.\r\nOptions are either valid for a company or a tour.",
            "nullable": true
          },
          "tourId": {
            "type": "string",
            "description": "Gets or sets id of the tour the options are valid for.\r\nOptions are either valid for a company or a tour.",
            "format": "uuid",
            "nullable": true
          },
          "suggestedSelectionValues": {
            "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.TourOptions.SuggestedSelectionValues"
          },
          "vehicleSchedulingGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.TourOptions.SchedulingGroup"
            },
            "description": "Gets or sets list of scheduling groups of the vehicles.",
            "nullable": true
          },
          "vehicles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.TourOptions.AssetResource"
            },
            "description": "Gets or sets list of vehicles.",
            "nullable": true
          },
          "trailerSchedulingGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.TourOptions.SchedulingGroup"
            },
            "description": "Gets or sets list of scheduling groups of the trailers.",
            "nullable": true
          },
          "trailers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.TourOptions.AssetResource"
            },
            "description": "Gets or sets list of trailers.",
            "nullable": true
          },
          "drivers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.TourOptions.TourOptionsEmployee"
            },
            "description": "Gets or sets list of employees that have at least one scheduling group.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Data object for tour options."
      },
      "Infosystem.Leva.WebApi.Internal.Controllers.Dtos.TourOptions.TourOptionsEmployee": {
        "type": "object",
        "properties": {
          "employeeId": {
            "type": "string",
            "description": "Gets or sets the id of the employee.",
            "nullable": true
          },
          "companyId": {
            "type": "string",
            "description": "Gets or sets the id of the company the employee is assigned to.",
            "nullable": true
          },
          "agencyId": {
            "type": "string",
            "description": "Gets or sets the id of the agency the employee is assigned to.",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether defines whether the employee is active."
          },
          "employeeNo": {
            "type": "integer",
            "description": "Gets or sets no. of the employee in this company.",
            "format": "int64",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "description": "Gets or sets first name of the employee.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Gets or sets last name of the employee.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Data object for a employee."
      },
      "Infosystem.Leva.WebApi.Internal.Controllers.Dtos.TourPlanning.Agency": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Gets or sets the agency ID.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Gets or sets the description of the agency.",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the agency is active."
          }
        },
        "additionalProperties": false,
        "description": "Data object for a leva agency."
      },
      "Infosystem.Leva.WebApi.Internal.Controllers.Dtos.TourPlanning.FlexibleTimeSpecification": {
        "type": "object",
        "properties": {
          "specification": {
            "type": "string",
            "description": "Gets or sets the specification identifier.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Gets or sets the description of the flexible time specification.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Data object for a leva flexible time specification."
      },
      "Infosystem.Leva.WebApi.Internal.Controllers.Dtos.TourPlanning.TourPlanningEnvironment": {
        "type": "object",
        "properties": {
          "companyId": {
            "type": "string",
            "description": "Gets or sets id of the company this environment is valid for.",
            "nullable": true
          },
          "databaseGlobalName": {
            "type": "string",
            "description": "Gets or sets global name of the underlying database of this environment.",
            "nullable": true
          },
          "rangeStart": {
            "type": "string",
            "description": "Gets or sets proposed start of the date range to filter the transport demands.",
            "format": "date"
          },
          "rangeEnd": {
            "type": "string",
            "description": "Gets or sets proposed end of the date range to filter the transport demands.",
            "format": "date"
          },
          "agencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.TourPlanning.Agency"
            },
            "description": "Gets or sets list of agencies to filter the transport demands.",
            "nullable": true
          },
          "locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.TourPlanning.TourPlanningLocation"
            },
            "description": "Gets or sets list of locations to filter the transport demands.",
            "nullable": true
          },
          "transportTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.TourPlanning.TransportType"
            },
            "description": "Gets or sets list of transport types to filter the transport demands.",
            "nullable": true
          },
          "tourStates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.TourPlanning.TourState"
            },
            "description": "Gets or sets list of states a tour can be in. Can be used to filter the tours.",
            "nullable": true
          },
          "flexibleTimeSpecifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.TourPlanning.FlexibleTimeSpecification"
            },
            "description": "Gets or sets list of flexible time specifications which a transport demand and tour points can be assigned to.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Data object for a tour planning environment."
      },
      "Infosystem.Leva.WebApi.Internal.Controllers.Dtos.TourPlanning.TourPlanningLocation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Gets or sets identifier of the location.\r\nIs identical to the identifier of the business partner address.",
            "nullable": true
          },
          "address": {
            "$ref": "#/components/schemas/Infosystem.Leva.Access.BusinessPartner.Interface.Address.Address"
          },
          "description": {
            "type": "string",
            "description": "Gets or sets the description of the location.",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether defines whether the location is active."
          }
        },
        "additionalProperties": false,
        "description": "Data object for leva location."
      },
      "Infosystem.Leva.WebApi.Internal.Controllers.Dtos.TourPlanning.TourState": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Gets or sets the ID of the tour state.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Gets or sets the description of the tour state.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Data object for a leva tour state."
      },
      "Infosystem.Leva.WebApi.Internal.Controllers.Dtos.TourPlanning.TransportType": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Gets or sets the type of the transport.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Gets or sets the description of the transport type.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Data object for leva transport demand types."
      },
      "Infosystem.Leva.WebApi.Internal.Controllers.Dtos.TransportDemand.TransportDemand": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Gets or sets identifier of the transport demand.",
            "nullable": true
          },
          "orderId": {
            "type": "string",
            "description": "Gets or sets identifier of the order to which the transport demand belongs.",
            "nullable": true
          },
          "orderNo": {
            "type": "string",
            "description": "Gets or sets number of the order to which the transport demand belongs.",
            "nullable": true
          },
          "businessPartner": {
            "type": "string",
            "description": "Gets or sets name of the business partner to which the order is assigned to.",
            "nullable": true
          },
          "transportType": {
            "type": "string",
            "description": "Gets or sets transport type of the transport demand (e.g. pick-up, delivery or transfer).",
            "nullable": true
          },
          "loadingDateTime": {
            "type": "string",
            "description": "Gets or sets date and time when the transport demand needs to be loaded.",
            "format": "date-time"
          },
          "loadingFlexTimeSpec": {
            "type": "string",
            "description": "Gets or sets flex time specification for the loading date time.",
            "nullable": true
          },
          "loadingFlexTimeSpecDescription": {
            "type": "string",
            "description": "Gets or sets description of the flexible time specification for loading.",
            "nullable": true
          },
          "unloadingDateTime": {
            "type": "string",
            "description": "Gets or sets date and time when the transport demand needs to be unloaded.",
            "format": "date-time"
          },
          "unloadingFlexTimeSpec": {
            "type": "string",
            "description": "Gets or sets flex time specification for the unloading date time.",
            "nullable": true
          },
          "unloadingFlexTimeSpecDescription": {
            "type": "string",
            "description": "Gets or sets description of the flexible time specification for unloading.",
            "nullable": true
          },
          "loadingLocation": {
            "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.TransportDemand.TransportDemandLocation"
          },
          "unloadingLocation": {
            "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.TransportDemand.TransportDemandLocation"
          },
          "schedulingGroupId": {
            "type": "string",
            "description": "Gets or sets id of the scheduling group of the transported resource demand (if any).",
            "nullable": true
          },
          "schedulingGroupActive": {
            "type": "boolean",
            "description": "Gets or sets active flag of the scheduling group of the transported resource demand (if any).",
            "nullable": true
          },
          "schedulingGroupDescription": {
            "type": "string",
            "description": "Gets or sets description of the scheduling group of the transported resource demand (if any).",
            "nullable": true
          },
          "assetResourceId": {
            "type": "string",
            "description": "Gets or sets id of the asset resource that needs to be transported.",
            "nullable": true
          },
          "assetResourceActive": {
            "type": "boolean",
            "description": "Gets or sets active flag of the asset resource that needs to be transported.",
            "nullable": true
          },
          "assetResourceDescription": {
            "type": "string",
            "description": "Gets or sets description of the asset resource that needs to be transported.",
            "nullable": true
          },
          "assetResourceNo": {
            "type": "string",
            "description": "Gets or sets no. of the asset resource that needs to be transported.",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "description": "Gets or sets comment for the transport demand.",
            "nullable": true
          },
          "quantity": {
            "type": "number",
            "description": "Gets or sets quantity that needs to be transported.",
            "format": "decimal"
          },
          "unit": {
            "type": "string",
            "description": "Gets or sets unit of the quantity.",
            "nullable": true
          },
          "dimensions": {
            "$ref": "#/components/schemas/Infosystem.Leva.WebApi.Internal.Controllers.Dtos.TransportDemand.TransportDemandDimensions"
          },
          "c6955OrderLabeling": {
            "type": "integer",
            "description": "Gets or sets the labeling of the order this transport demand belongs to.",
            "format": "int64",
            "nullable": true
          },
          "tourPlanningDisabled": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether tour planning is disabled for this transport demand."
          }
        },
        "additionalProperties": false,
        "description": "Data object for a transport demand."
      },
      "Infosystem.Leva.WebApi.Internal.Controllers.Dtos.TransportDemand.TransportDemandDimensions": {
        "type": "object",
        "properties": {
          "weight": {
            "type": "number",
            "description": "Gets or sets the weight of the transport demand.",
            "format": "decimal",
            "nullable": true
          },
          "weightUnit": {
            "type": "string",
            "description": "Gets or sets the unit of the weight.",
            "nullable": true
          },
          "length": {
            "type": "number",
            "description": "Gets or sets the length of the transport demand.",
            "format": "decimal",
            "nullable": true
          },
          "lengthUnit": {
            "type": "string",
            "description": "Gets or sets the unit of the length.",
            "nullable": true
          },
          "width": {
            "type": "number",
            "description": "Gets or sets the width of the transport demand.",
            "format": "decimal",
            "nullable": true
          },
          "widthUnit": {
            "type": "string",
            "description": "Gets or sets the unit of the width.",
            "nullable": true
          },
          "height": {
            "type": "number",
            "description": "Gets or sets the height of the transport demand.",
            "format": "decimal",
            "nullable": true
          },
          "heightUnit": {
            "type": "string",
            "description": "Gets or sets the unit of the height.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Data object for the dimensions of a transport demand."
      },
      "Infosystem.Leva.WebApi.Internal.Controllers.Dtos.TransportDemand.TransportDemandLocation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Gets or sets the ID of the location.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Gets or sets the description of the location.",
            "nullable": true
          },
          "street": {
            "type": "string",
            "description": "Gets or sets the street address of the location.",
            "nullable": true
          },
          "houseNo": {
            "type": "string",
            "description": "Gets or sets the house number of the location.",
            "nullable": true
          },
          "addressAddition": {
            "type": "string",
            "description": "Gets or sets additional address information.",
            "nullable": true
          },
          "zipCode": {
            "type": "string",
            "description": "Gets or sets the zip code of the location.",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "Gets or sets the city of the location.",
            "nullable": true
          },
          "country": {
            "type": "string",
            "description": "Gets or sets the country of the location.",
            "nullable": true
          },
          "latitude": {
            "type": "number",
            "description": "Gets or sets the latitude coordinate of the location.",
            "format": "decimal",
            "nullable": true
          },
          "longitude": {
            "type": "number",
            "description": "Gets or sets the longitude coordinate of the location.",
            "format": "decimal",
            "nullable": true
          },
          "businessPartnerAddressId": {
            "type": "string",
            "description": "Gets or sets the business partner address ID associated with the location.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Data object for a location of a transport demand."
      },
      "Infosystem.Leva.WebApi.Internal.Controllers.Dtos.User.SettingEntry": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Gets or sets the setting key.",
            "nullable": true
          },
          "value": {
            "type": "string",
            "description": "Gets or sets the setting value.",
            "nullable": true
          },
          "valueType": {
            "type": "string",
            "description": "Gets or sets the value type.",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the setting is active.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "User setting entry used for the legacy baf frontend grid utility."
      },
      "Infosystem.Leva.WebApi.Internal.Controllers.Dtos.User.User": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "Gets or sets id of the user.",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "description": "Gets or sets name of the user.",
            "nullable": true
          },
          "activeCompanyNo": {
            "type": "integer",
            "description": "Gets or sets the user's active company number.",
            "format": "int64"
          },
          "activeCompanyName": {
            "type": "string",
            "description": "Gets or sets the name of the user's active company.",
            "nullable": true
          },
          "eMail": {
            "type": "string",
            "description": "Gets or sets e-Mail address of the user.",
            "nullable": true
          },
          "language": {
            "type": "string",
            "description": "Gets or sets the language code (ISO 639-1).",
            "nullable": true
          },
          "userSettings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/System.Collections.Generic.KeyValuePair`2[System.String,System.String]"
            },
            "description": "Gets or sets the settings of the user for the tour planning.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Data object for an user of the tour planning."
      },
      "Microsoft.AspNetCore.Mvc.ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "System.Collections.Generic.KeyValuePair`2[System.String,System.String]": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "http",
        "description": "Please enter a valid token",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}
